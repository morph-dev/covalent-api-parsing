[
  {
    "classSubType": "uniswap",
    "classSubTypeDescription": "Uniswap is a fully decentralized protocol for automated liquidity provision on Ethereum. Uniswap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Given a `:chain_id`, return a paginated list of Uniswap pools sorted by transaction timestamp in desc order.",
    "id": "1",
    "isBeta": true,
    "notes": [],
    "order": 1,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
        "global": false,
        "name": "primer",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Filters the records to pass only the documents that match the specified condition(s).",
        "global": false,
        "name": "match",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
        "global": false,
        "name": "group",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Sorts all input records and returns them in ascending or descending sorted order.",
        "global": false,
        "name": "sort",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Skips over the specified number of records.",
        "global": false,
        "name": "skip",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "Limits the number of records.",
        "global": false,
        "name": "limit",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/:chain_id/uniswap_v3/pools/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "Token": {
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            },
            "supports_erc": {
              "items": {
                "items": {
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "UniswapV3Pool": {
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "chain_name": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "pool_contract_address": {
              "type": "string"
            },
            "pool_deploy_time": {
              "format": "date-time",
              "type": "string"
            },
            "pool_fee": {
              "type": "number"
            },
            "pool_tick_spacing": {
              "type": "number"
            },
            "token_0": {
              "$ref": "#/components/schemas/Token"
            },
            "token_1": {
              "$ref": "#/components/schemas/Token"
            }
          },
          "type": "object"
        }
      },
      "name": "UniswapV3Pool",
      "schema": {
        "properties": {
          "chain_id": {
            "type": "string"
          },
          "chain_name": {
            "type": "string"
          },
          "dex_name": {
            "type": "string"
          },
          "pool_contract_address": {
            "type": "string"
          },
          "pool_deploy_time": {
            "format": "date-time",
            "type": "string"
          },
          "pool_fee": {
            "type": "number"
          },
          "pool_tick_spacing": {
            "type": "number"
          },
          "token_0": {
            "$ref": "#/components/schemas/Token"
          },
          "token_1": {
            "$ref": "#/components/schemas/Token"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Get Uniswap v3 pools",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          }
        ]
      }
    ],
    "title": "Get Uniswap v3 pools",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Given `:chain_id` and wallet `:address`, return current token balances along with their spot prices. This endpoint supports a variety of token standards like ERC20, ERC721 and ERC1155. As a special case, network native tokens like ETH on Ethereum are also returned even though it's not a token contract.",
    "id": "1",
    "isBeta": false,
    "notes": [
      {
        "description": "Get token balances for any address on Solana using chain_id 1399811149.",
        "title": "ðŸ”¥ Now supporting Solana"
      },
      {
        "description": "Tokens like Ampleforth (AMPL) that auto re-balance with custom scaling factors are not supported. ",
        "title": "No support for re-balancing tokens"
      },
      {
        "description": "Tokens with less than $0.1 in spot fiat value get classified as dust. The developer is free to ignore/hide these tokens as they wish.",
        "title": "Tokens classified as dust"
      }
    ],
    "order": 1,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Set to `true` to return ERC721 and ERC1155 assets. Defaults to `false`.",
        "global": false,
        "name": "nft",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "boolean"
      },
      {
        "choices": [],
        "description": "Set to `true` to skip fetching NFT metadata, which can result in faster responses. Defaults to `false` and only applies when `nft=true`.",
        "global": false,
        "name": "no-nft-fetch",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "boolean"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/address/:address/balances_v2/",
    "realTime": true,
    "released_at": "2022-02-09",
    "response": {
      "components": {
        "BalanceResponseType": {
          "properties": {
            "address": {
              "description": "The requested wallet address.",
              "type": "string"
            },
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/WalletBalanceItem"
                }
              },
              "type": "array"
            },
            "next_update_at": {
              "description": "The next updated time.",
              "format": "date-time",
              "type": "string"
            },
            "quote_currency": {
              "description": "The requested fiat currency.",
              "type": "string"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "INFTMetadata": {
          "description": "Array of NFTs that are held under this contract.",
          "type": "object"
        },
        "WalletBalanceItem": {
          "properties": {
            "balance": {
              "description": "The asset balance. Use `contract_decimals` to scale this balance for display purposes.",
              "type": "integer"
            },
            "balance_24h": {
              "description": "The asset balance 24 hours ago.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "last_transferred_at": {
              "description": "Last transferred date for a wallet",
              "format": "date-time",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "nft_data": {
              "description": "Array of NFTs that are held under this contract.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/INFTMetadata"
                }
              },
              "type": "array"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_24h": {
              "description": "The current balance converted to fiat in `quote-currency` as of 24 hours ago.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate_24h": {
              "description": "The spot exchange rate in `quote-currency` as of 24 hours ago.",
              "format": "float",
              "type": "number"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            },
            "type": {
              "description": "One of `cryptocurrency`, `stablecoin`, `nft` or `dust`.",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "BalanceResponseType",
      "schema": {
        "properties": {
          "address": {
            "description": "The requested wallet address.",
            "type": "string"
          },
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/WalletBalanceItem"
              }
            },
            "type": "array"
          },
          "next_update_at": {
            "description": "The next updated time.",
            "format": "date-time",
            "type": "string"
          },
          "quote_currency": {
            "description": "The requested fiat currency.",
            "type": "string"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Basic example of fetching token balances on Ethereum (with ENS resolution)",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "demo.eth"
          }
        ]
      },
      {
        "description": "Basic example of fetching NFTs (ERC721 and ERC1155) on Ethereum",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "demo.eth"
          },
          {
            "name": "nft",
            "value": "true"
          }
        ]
      }
    ],
    "title": "Get token balances for address",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Pricing endpoints",
    "description": "Given `:chain_id` and `:contract_addresses`, return their historical prices. Can filter by date ranges and convert to `:quote_currency`. Only daily granularity is supported.",
    "id": "1",
    "isBeta": false,
    "notes": [
      {
        "description": "We rely on Coingecko for our source of token prices. Spot prices are updated every 10s and historical prices (daily granularity) are updated every day.",
        "title": "Source for price feeds"
      }
    ],
    "order": 1,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "contract_addresses",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote_currency",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The start day of the historical price range. (YYYY-MM-DD)",
        "global": false,
        "name": "from",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The end day of the historical price range. (YYYY-MM-DD)",
        "global": false,
        "name": "to",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Sort the prices in chronological ascending order. By default, it's set to `false` and returns prices in chronological descending order.",
        "global": false,
        "name": "prices-at-asc",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/pricing/historical_by_addresses_v2/:chain_id/:quote_currency/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "AddressWithHistoricalPricesItem": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "items": {
              "items": {
                "items": {
                  "type": "object"
                }
              },
              "type": "array"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "prices": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/HistoricalPriceItem"
                }
              },
              "type": "array"
            },
            "quote_currency": {
              "type": "string"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            },
            "update_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ContractMetadata": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "HistoricalPriceItem": {
          "properties": {
            "contract_metadata": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "date": {
              "format": "date",
              "type": "string"
            },
            "price": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        }
      },
      "name": "AddressWithHistoricalPricesItem",
      "schema": {
        "properties": {
          "contract_address": {
            "description": "Smart contract address.",
            "type": "string"
          },
          "contract_decimals": {
            "description": "Smart contract decimals.",
            "format": "int32",
            "type": "integer"
          },
          "contract_name": {
            "description": "Smart contract name.",
            "type": "string"
          },
          "contract_ticker_symbol": {
            "description": "Smart contract ticker symbol.",
            "type": "string"
          },
          "items": {
            "items": {
              "items": {
                "type": "object"
              }
            },
            "type": "array"
          },
          "logo_url": {
            "description": "Smart contract URL.",
            "type": "string"
          },
          "prices": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/HistoricalPriceItem"
              }
            },
            "type": "array"
          },
          "quote_currency": {
            "type": "string"
          },
          "supports_erc": {
            "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
            "items": {
              "items": {
                "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                "type": "string"
              }
            },
            "type": "array"
          },
          "update_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get historical token prices",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Pricing endpoints",
    "description": "Given `:quote_currency` and `:ticker_symbol`, return historical prices for a `:ticker_symbol` in a particular `:quote-currency`. Can pass to and from to define a range, by default if they are omitted, it returns today's price.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 2,
    "params": [
      {
        "choices": [],
        "description": "Smart contract ticker symbol.",
        "global": false,
        "name": "ticker_symbol",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote_currency",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The start day of the historical price range. (YYYY-MM-DD)",
        "global": false,
        "name": "from",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The end day of the historical price range. (YYYY-MM-DD)",
        "global": false,
        "name": "to",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Sort the prices in chronological ascending order. By default, it's set to `false` and returns prices in chronological descending order.",
        "global": false,
        "name": "prices-at-asc",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/pricing/historical/:quote_currency/:ticker_symbol/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "AddressWithHistoricalPricesItem": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "items": {
              "items": {
                "items": {
                  "type": "object"
                }
              },
              "type": "array"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "prices": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/HistoricalPriceItem"
                }
              },
              "type": "array"
            },
            "quote_currency": {
              "type": "string"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            },
            "update_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "AddressWithHistoricalPricesResponseType": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/AddressWithHistoricalPricesItem"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ContractMetadata": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "HistoricalPriceItem": {
          "properties": {
            "contract_metadata": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "date": {
              "format": "date",
              "type": "string"
            },
            "price": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "AddressWithHistoricalPricesResponseType",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/AddressWithHistoricalPricesItem"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get historical prices by ticker symbol",
    "websocketSupport": false
  },
  {
    "classSubType": "uniswap",
    "classSubTypeDescription": "Uniswap is a fully decentralized protocol for automated liquidity provision on Ethereum. Uniswap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Given `:chain_id` and contract `:address`, return Uniswap v3 liquidity transactions from network sorted by transaction timestamp in desc order.",
    "id": "1",
    "isBeta": true,
    "notes": [],
    "order": 2,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Smart contract address.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
        "global": false,
        "name": "primer",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Filters the records to pass only the documents that match the specified condition(s).",
        "global": false,
        "name": "match",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
        "global": false,
        "name": "group",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Sorts all input records and returns them in ascending or descending sorted order.",
        "global": false,
        "name": "sort",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Skips over the specified number of records.",
        "global": false,
        "name": "skip",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "Limits the number of records.",
        "global": false,
        "name": "limit",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/:chain_id/uniswap_v3/liquidity/address/:address/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "Token": {
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            },
            "supports_erc": {
              "items": {
                "items": {
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "UniswapV3Liquidity": {
          "properties": {
            "block_signed_at": {
              "format": "date-time",
              "type": "string"
            },
            "chain_id": {
              "type": "string"
            },
            "chain_name": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "liquidity_event": {
              "type": "string"
            },
            "pool_address": {
              "type": "string"
            },
            "price_tick_lower": {
              "type": "number"
            },
            "price_tick_lower_adjusted": {
              "type": "number"
            },
            "price_tick_upper": {
              "type": "number"
            },
            "price_tick_upper_adjusted": {
              "type": "number"
            },
            "token_0": {
              "$ref": "#/components/schemas/Token"
            },
            "token_0_amount": {
              "type": "number"
            },
            "token_1": {
              "$ref": "#/components/schemas/Token"
            },
            "token_1_amount": {
              "type": "number"
            },
            "tx_hash": {
              "type": "string"
            },
            "txn_time": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "UniswapV3Liquidity",
      "schema": {
        "properties": {
          "block_signed_at": {
            "format": "date-time",
            "type": "string"
          },
          "chain_id": {
            "type": "string"
          },
          "chain_name": {
            "type": "string"
          },
          "dex_name": {
            "type": "string"
          },
          "liquidity_event": {
            "type": "string"
          },
          "pool_address": {
            "type": "string"
          },
          "price_tick_lower": {
            "type": "number"
          },
          "price_tick_lower_adjusted": {
            "type": "number"
          },
          "price_tick_upper": {
            "type": "number"
          },
          "price_tick_upper_adjusted": {
            "type": "number"
          },
          "token_0": {
            "$ref": "#/components/schemas/Token"
          },
          "token_0_amount": {
            "type": "number"
          },
          "token_1": {
            "$ref": "#/components/schemas/Token"
          },
          "token_1_amount": {
            "type": "number"
          },
          "tx_hash": {
            "type": "string"
          },
          "txn_time": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Get network Uniswap v3 transactions for the contract X",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "0x5d44a02c9e2ed366fb987793d90216b0609aa55c"
          }
        ]
      }
    ],
    "title": "Get Uniswap v3 liquidity transactions",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Given `:chain_id` and wallet `:address`, return wallet value for the last 30 days at 24 hour interval timestamps.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 2,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/address/:address/portfolio_v2/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "HistoricalPortfolioResponse": {
          "properties": {
            "address": {
              "description": "The requested wallet address.",
              "type": "string"
            },
            "chain_id": {
              "description": "The requested chain ID.",
              "format": "int64",
              "type": "integer"
            },
            "items": {
              "description": "List of tokens in portfolio",
              "items": {
                "items": {
                  "description": "List of tokens in portfolio",
                  "type": "object"
                }
              },
              "type": "array"
            },
            "next_update_at": {
              "description": "The next updated time.",
              "format": "date-time",
              "type": "string"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "quote_currency": {
              "description": "The requested fiat currency.",
              "type": "string"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "HistoricalPortfolioResponse",
      "schema": {
        "properties": {
          "address": {
            "description": "The requested wallet address.",
            "type": "string"
          },
          "chain_id": {
            "description": "The requested chain ID.",
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "description": "List of tokens in portfolio",
            "items": {
              "items": {
                "description": "List of tokens in portfolio",
                "type": "object"
              }
            },
            "type": "array"
          },
          "next_update_at": {
            "description": "The next updated time.",
            "format": "date-time",
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "quote_currency": {
            "description": "The requested fiat currency.",
            "type": "string"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Basic example of fetching historical portfolio on Ethereum (with ENS resolution)",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "demo.eth"
          }
        ]
      }
    ],
    "title": "Get historical portfolio value over time",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Pricing endpoints",
    "description": "Return spot prices and metadata for all tickers or a select group of tickers. Without `:tickers` query param, it returns a paginated list of all tickers sorted by market cap.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 3,
    "params": [
      {
        "choices": [],
        "description": "If tickers (a comma separated list of tickers is present), only return the spot prices for these tokens.",
        "global": false,
        "name": "tickers",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/pricing/tickers/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "TickerPriceItemWithRank": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "rank": {
              "description": "Market cap rank.",
              "format": "int32",
              "type": "integer"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "TickerPriceResponseType": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/TickerPriceItemWithRank"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "TickerPriceResponseType",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/TickerPriceItemWithRank"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get spot prices",
    "websocketSupport": false
  },
  {
    "classSubType": "uniswap",
    "classSubTypeDescription": "Uniswap is a fully decentralized protocol for automated liquidity provision on Ethereum. Uniswap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Given `:chain_id` and contract `:address`, return a paginated list of Uniswap v3 pool swaps sorted by swap signed timestamp in desc order.",
    "id": "1",
    "isBeta": true,
    "notes": [],
    "order": 3,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Smart contract address.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Records enter a multi-stage pipeline that transforms the records into aggregated results. Supports $group and Aggregation operators.",
        "global": false,
        "name": "primer",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Filters the records to pass only the documents that match the specified condition(s).",
        "global": false,
        "name": "match",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Groups input elements by the specified id expression and for each distinct grouping, outputs an element. Grouping by _date operators is also possible.",
        "global": false,
        "name": "group",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Sorts all input records and returns them in ascending or descending sorted order.",
        "global": false,
        "name": "sort",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Skips over the specified number of records.",
        "global": false,
        "name": "skip",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "Limits the number of records.",
        "global": false,
        "name": "limit",
        "pathParam": false,
        "primer": true,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/:chain_id/uniswap_v3/swaps/address/:address/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "Token": {
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            },
            "supports_erc": {
              "items": {
                "items": {
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "UniswapV3Pool": {
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "chain_name": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "pool_contract_address": {
              "type": "string"
            },
            "pool_deploy_time": {
              "format": "date-time",
              "type": "string"
            },
            "pool_fee": {
              "type": "number"
            },
            "pool_tick_spacing": {
              "type": "number"
            },
            "token_0": {
              "$ref": "#/components/schemas/Token"
            },
            "token_1": {
              "$ref": "#/components/schemas/Token"
            }
          },
          "type": "object"
        }
      },
      "name": "UniswapV3Pool",
      "schema": {
        "properties": {
          "chain_id": {
            "type": "string"
          },
          "chain_name": {
            "type": "string"
          },
          "dex_name": {
            "type": "string"
          },
          "pool_contract_address": {
            "type": "string"
          },
          "pool_deploy_time": {
            "format": "date-time",
            "type": "string"
          },
          "pool_fee": {
            "type": "number"
          },
          "pool_tick_spacing": {
            "type": "number"
          },
          "token_0": {
            "$ref": "#/components/schemas/Token"
          },
          "token_1": {
            "$ref": "#/components/schemas/Token"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Get Uniswap v3 pool swaps for the contract X",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "0x5d44a02c9e2ed366fb987793d90216b0609aa55c"
          }
        ]
      }
    ],
    "title": "Get Uniswap v3 pool swaps",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Given `:chain_id` and wallet `:address`, return all transactions along with their decoded log events. This endpoint does a deep-crawl of the blockchain to retrieve all kinds of transactions that references the `:address` including indexed topics within the event logs.",
    "id": "1",
    "isBeta": false,
    "notes": [
      {
        "description": "sender_logo_url may reference to a not found resource (return status 404).",
        "title": "sender_logo_url field"
      }
    ],
    "order": 3,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Sort the transactions in chronological ascending order. By default, it's set to `false` and returns transactions in chronological descending order.",
        "global": false,
        "name": "block-signed-at-asc",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "boolean"
      },
      {
        "choices": [],
        "description": "Setting this to `true` will omit decoded event logs, resulting in lighter and faster responses. By default it's set to `false`.",
        "global": false,
        "name": "no-logs",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "boolean"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/address/:address/transactions_v2/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "BlockTransactionWithLogEvents": {
          "description": "The transactions.",
          "properties": {
            "block_height": {
              "description": "The height of the block.",
              "format": "int32",
              "type": "integer"
            },
            "block_signed_at": {
              "description": "The signed time of the block.",
              "format": "date-time",
              "type": "string"
            },
            "from_address": {
              "description": "The address where the transaction is from.",
              "type": "string"
            },
            "from_address_label": {
              "description": "The label of `from` address.",
              "type": "string"
            },
            "gas_offered": {
              "description": "The gas offered for this tx.",
              "format": "int64",
              "type": "integer"
            },
            "gas_price": {
              "description": "The gas price at the time of this tx.",
              "format": "int64",
              "type": "integer"
            },
            "gas_quote": {
              "description": "The gas spent in `quote-currency` denomination.",
              "format": "double",
              "type": "number"
            },
            "gas_quote_rate": {
              "description": "The gas exchange rate at the time of Tx in `quote_currency`.",
              "format": "double",
              "type": "number"
            },
            "gas_spent": {
              "description": "The gas spent for this tx.",
              "format": "int64",
              "type": "integer"
            },
            "log_events": {
              "description": "The log events.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/LogEventItem"
                }
              },
              "type": "array"
            },
            "successful": {
              "description": "The transaction status.",
              "type": "boolean"
            },
            "to_address": {
              "description": "The address where the transaction is to.",
              "type": "string"
            },
            "to_address_label": {
              "description": "The label of `to` address.",
              "type": "string"
            },
            "tx_hash": {
              "description": "The transaction hash.",
              "type": "string"
            },
            "tx_offset": {
              "description": "The transaction offset.",
              "format": "int32",
              "type": "integer"
            },
            "value": {
              "description": "The value attached to this tx.",
              "type": "number"
            },
            "value_quote": {
              "description": "The value attached in `quote-currency` to this tx.",
              "format": "double",
              "type": "number"
            }
          },
          "type": "object"
        },
        "DecodedItem": {
          "description": "The decoded item.",
          "properties": {
            "name": {
              "description": "The name of the decoded item.",
              "type": "string"
            },
            "params": {
              "description": "The parameters of the decoded item.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/DecodedParamItem"
                }
              },
              "type": "array"
            },
            "signature": {
              "description": "The signature of the decoded item.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "DecodedParamItem": {
          "description": "The parameters of the decoded item.",
          "properties": {
            "decoded": {
              "description": "The decoded value of the parameter.",
              "type": "boolean"
            },
            "indexed": {
              "description": "The index of the parameter.",
              "type": "boolean"
            },
            "name": {
              "description": "The name of the parameter.",
              "type": "string"
            },
            "type": {
              "description": "The type of the parameter.",
              "type": "string"
            },
            "value": {
              "description": "The value of the parameter.",
              "type": "object"
            }
          },
          "type": "object"
        },
        "LogEventItem": {
          "description": "The log events.",
          "properties": {
            "block_height": {
              "description": "The height of the block.",
              "format": "int64",
              "type": "integer"
            },
            "block_signed_at": {
              "description": "The signed time of the block.",
              "format": "date-time",
              "type": "string"
            },
            "decoded": {
              "$ref": "#/components/schemas/DecodedItem"
            },
            "log_offset": {
              "description": "The log offset.",
              "format": "int64",
              "type": "integer"
            },
            "raw_log_data": {
              "description": "The log events in raw.",
              "type": "string"
            },
            "raw_log_topics": {
              "items": {
                "items": {
                  "type": "string"
                }
              },
              "type": "array"
            },
            "sender_address": {
              "description": "The address of the sender.",
              "type": "string"
            },
            "sender_address_label": {
              "description": "The label of the sender address.",
              "type": "string"
            },
            "sender_contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "sender_contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "sender_logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "sender_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "tx_hash": {
              "description": "The transaction hash.",
              "type": "string"
            },
            "tx_offset": {
              "description": "The transaction offset.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "TransactionResponse": {
          "properties": {
            "address": {
              "description": "The requested wallet address.",
              "type": "string"
            },
            "chain_id": {
              "description": "The requested chain ID.",
              "format": "int64",
              "type": "integer"
            },
            "items": {
              "description": "The transactions.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/BlockTransactionWithLogEvents"
                }
              },
              "type": "array"
            },
            "next_update_at": {
              "description": "The next updated time.",
              "format": "date-time",
              "type": "string"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "quote_currency": {
              "description": "The requested fiat currency.",
              "type": "string"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "TransactionResponse",
      "schema": {
        "properties": {
          "address": {
            "description": "The requested wallet address.",
            "type": "string"
          },
          "chain_id": {
            "description": "The requested chain ID.",
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "description": "The transactions.",
            "items": {
              "items": {
                "$ref": "#/components/schemas/BlockTransactionWithLogEvents"
              }
            },
            "type": "array"
          },
          "next_update_at": {
            "description": "The next updated time.",
            "format": "date-time",
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "quote_currency": {
            "description": "The requested fiat currency.",
            "type": "string"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Basic example of fetching transactions from an address on Ethereum with decoded log events",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "0xa79E63e78Eec28741e711f89A672A4C40876Ebf3"
          }
        ]
      }
    ],
    "title": "Get transactions for address",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Given `:chain_id` and `:tx_hash`, return the transaction data with their decoded event logs.",
    "id": "1",
    "isBeta": false,
    "notes": [
      {
        "description": "sender_logo_url may reference to a not found resource (return status 404).",
        "title": "sender_logo_url field"
      }
    ],
    "order": 4,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Hex encoded transaction hash.",
        "global": false,
        "name": "tx_hash",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Setting this to `true` will omit decoded event logs, resulting in lighter and faster responses. By default it's set to `false`.",
        "global": false,
        "name": "no-logs",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "boolean"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/transaction_v2/:tx_hash/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "BlockTransactionWithLogEvents": {
          "properties": {
            "block_height": {
              "description": "The height of the block.",
              "format": "int32",
              "type": "integer"
            },
            "block_signed_at": {
              "description": "The signed time of the block.",
              "format": "date-time",
              "type": "string"
            },
            "from_address": {
              "description": "The address where the transaction is from.",
              "type": "string"
            },
            "from_address_label": {
              "description": "The label of `from` address.",
              "type": "string"
            },
            "gas_offered": {
              "description": "The gas offered for this tx.",
              "format": "int64",
              "type": "integer"
            },
            "gas_price": {
              "description": "The gas price at the time of this tx.",
              "format": "int64",
              "type": "integer"
            },
            "gas_quote": {
              "description": "The gas spent in `quote-currency` denomination.",
              "format": "double",
              "type": "number"
            },
            "gas_quote_rate": {
              "description": "The gas exchange rate at the time of Tx in `quote_currency`.",
              "format": "double",
              "type": "number"
            },
            "gas_spent": {
              "description": "The gas spent for this tx.",
              "format": "int64",
              "type": "integer"
            },
            "log_events": {
              "description": "The log events.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/LogEventItem"
                }
              },
              "type": "array"
            },
            "successful": {
              "description": "The transaction status.",
              "type": "boolean"
            },
            "to_address": {
              "description": "The address where the transaction is to.",
              "type": "string"
            },
            "to_address_label": {
              "description": "The label of `to` address.",
              "type": "string"
            },
            "tx_hash": {
              "description": "The transaction hash.",
              "type": "string"
            },
            "tx_offset": {
              "description": "The transaction offset.",
              "format": "int32",
              "type": "integer"
            },
            "value": {
              "description": "The value attached to this tx.",
              "type": "number"
            },
            "value_quote": {
              "description": "The value attached in `quote-currency` to this tx.",
              "format": "double",
              "type": "number"
            }
          },
          "type": "object"
        },
        "DecodedItem": {
          "description": "The decoded item.",
          "properties": {
            "name": {
              "description": "The name of the decoded item.",
              "type": "string"
            },
            "params": {
              "description": "The parameters of the decoded item.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/DecodedParamItem"
                }
              },
              "type": "array"
            },
            "signature": {
              "description": "The signature of the decoded item.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "DecodedParamItem": {
          "description": "The parameters of the decoded item.",
          "properties": {
            "decoded": {
              "description": "The decoded value of the parameter.",
              "type": "boolean"
            },
            "indexed": {
              "description": "The index of the parameter.",
              "type": "boolean"
            },
            "name": {
              "description": "The name of the parameter.",
              "type": "string"
            },
            "type": {
              "description": "The type of the parameter.",
              "type": "string"
            },
            "value": {
              "description": "The value of the parameter.",
              "type": "object"
            }
          },
          "type": "object"
        },
        "LogEventItem": {
          "description": "The log events.",
          "properties": {
            "block_height": {
              "description": "The height of the block.",
              "format": "int64",
              "type": "integer"
            },
            "block_signed_at": {
              "description": "The signed time of the block.",
              "format": "date-time",
              "type": "string"
            },
            "decoded": {
              "$ref": "#/components/schemas/DecodedItem"
            },
            "log_offset": {
              "description": "The log offset.",
              "format": "int64",
              "type": "integer"
            },
            "raw_log_data": {
              "description": "The log events in raw.",
              "type": "string"
            },
            "raw_log_topics": {
              "items": {
                "items": {
                  "type": "string"
                }
              },
              "type": "array"
            },
            "sender_address": {
              "description": "The address of the sender.",
              "type": "string"
            },
            "sender_address_label": {
              "description": "The label of the sender address.",
              "type": "string"
            },
            "sender_contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "sender_contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "sender_logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "sender_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "tx_hash": {
              "description": "The transaction hash.",
              "type": "string"
            },
            "tx_offset": {
              "description": "The transaction offset.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "SingleTransactionResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/BlockTransactionWithLogEvents"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "SingleTransactionResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/BlockTransactionWithLogEvents"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Basic example of fetching a transaction of an Ethereum address",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "tx_hash",
            "value": "0xbda92389200cadac424d64202caeab70cd5e93756fe34c08578adeb310bba254"
          }
        ]
      }
    ],
    "title": "Get a transaction",
    "websocketSupport": false
  },
  {
    "classSubType": "uniswap",
    "classSubTypeDescription": "Uniswap is a fully decentralized protocol for automated liquidity provision on Ethereum. Uniswap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Return pool information across all Uniswap V2 pools including LP token prices, reserves, exchange volumes and fees.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 4,
    "params": [
      {
        "choices": [],
        "description": "If `tickers` (a comma separated list) is present, only return the pools that contain these tickers.",
        "global": false,
        "name": "tickers",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/1/networks/uniswap_v2/assets/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "ExchangeVolume": {
          "properties": {
            "block_height": {
              "format": "int32",
              "type": "integer"
            },
            "exchange": {
              "type": "string"
            },
            "fee_24h_quote": {
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "swap_count_24h": {
              "format": "int64",
              "type": "integer"
            },
            "token_0": {
              "$ref": "#/components/schemas/Token"
            },
            "token_1": {
              "$ref": "#/components/schemas/Token"
            },
            "total_liquidity_quote": {
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "type": "integer"
            },
            "volume_24h_quote": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "Token": {
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "reserve": {
              "type": "integer"
            },
            "volume_in_24h": {
              "type": "number"
            },
            "volume_out_24h": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "UniswapExchangeListResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeVolume"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "UniswapExchangeListResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeVolume"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Uniswap v2 pools",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Pricing endpoints",
    "description": "Return price volatility and metadata for a select group of tickers. Without the `:tickers` query param, it defaults to `ETH` volatility.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 4,
    "params": [
      {
        "choices": [],
        "description": "If tickers (a comma separated list of tickers is present), only return the spot prices for these tokens.",
        "global": false,
        "name": "tickers",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/pricing/volatility/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "PriceVolatilityResponseType": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/VolatilityItem"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "VolatilityItem": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "stddev_16h": {
              "description": "16h price standard deviation",
              "format": "float",
              "type": "number"
            },
            "stddev_1h": {
              "description": "1h price standard deviation",
              "format": "float",
              "type": "number"
            },
            "stddev_24h": {
              "description": "24h price standard deviation",
              "format": "float",
              "type": "number"
            },
            "stddev_2h": {
              "description": "2h price standard deviation",
              "format": "float",
              "type": "number"
            },
            "stddev_4h": {
              "description": "4h price standard deviation",
              "format": "float",
              "type": "number"
            },
            "stddev_8h": {
              "description": "8h price standard deviation",
              "format": "float",
              "type": "number"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "name": "PriceVolatilityResponseType",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/VolatilityItem"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get price volatility",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Given `:chain_id`, wallet `:address` and `:contract-address`, return all ERC20 token contract transfers along with their historical prices at the time of their transfer.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 5,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Smart contract address.",
        "global": false,
        "name": "contract-address",
        "pathParam": false,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Starting block to define a block range.",
        "global": false,
        "name": "starting-block",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "Ending block to define a block range.",
        "global": false,
        "name": "ending-block",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/:chain_id/address/:address/transfers_v2/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "BlockTransactionWithContractTransfers": {
          "description": "The transactions.",
          "properties": {
            "block_height": {
              "description": "The height of the block.",
              "format": "int32",
              "type": "integer"
            },
            "block_signed_at": {
              "description": "The signed time of the block.",
              "format": "date-time",
              "type": "string"
            },
            "from_address": {
              "description": "The address where the transaction is from.",
              "type": "string"
            },
            "from_address_label": {
              "description": "The label of `from` address.",
              "type": "string"
            },
            "gas_offered": {
              "description": "The gas offered for this tx.",
              "format": "int64",
              "type": "integer"
            },
            "gas_price": {
              "description": "The gas price at the time of this tx.",
              "format": "int64",
              "type": "integer"
            },
            "gas_quote": {
              "description": "The gas spent in `quote-currency` denomination.",
              "format": "double",
              "type": "number"
            },
            "gas_quote_rate": {
              "description": "The gas exchange rate at the time of Tx in `quote_currency`.",
              "format": "double",
              "type": "number"
            },
            "gas_spent": {
              "description": "The gas spent for this tx.",
              "format": "int64",
              "type": "integer"
            },
            "successful": {
              "description": "The transaction status.",
              "type": "boolean"
            },
            "to_address": {
              "description": "The address where the transaction is to.",
              "type": "string"
            },
            "to_address_label": {
              "description": "The label of `to` address.",
              "type": "string"
            },
            "transfers": {
              "description": "Transfer items.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/TokenTransferItem"
                }
              },
              "type": "array"
            },
            "tx_hash": {
              "description": "The transaction hash.",
              "type": "string"
            },
            "tx_offset": {
              "description": "The transaction offset.",
              "format": "int32",
              "type": "integer"
            },
            "value": {
              "description": "The value attached to this tx.",
              "type": "number"
            },
            "value_quote": {
              "description": "The value attached in `quote-currency` to this tx.",
              "format": "double",
              "type": "number"
            }
          },
          "type": "object"
        },
        "MethodCallsForTransfers": {
          "description": "Additional details on which transfer events were invoked. Defaults to `true`.",
          "properties": {
            "method": {
              "description": "The name of the decoded item.",
              "type": "string"
            },
            "sender_address": {
              "description": "The address of the sender.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "TokenTransferItem": {
          "description": "Transfer items.",
          "properties": {
            "balance": {
              "description": "The transfer balance. Use `contract_decimals` to scale this balance for display purposes.",
              "type": "number"
            },
            "balance_quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "double",
              "type": "number"
            },
            "block_signed_at": {
              "description": "The signed time of the block.",
              "format": "date-time",
              "type": "string"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "delta": {
              "description": "The delta attached to this transfer.",
              "type": "number"
            },
            "delta_quote": {
              "description": "The current delta converted to fiat in `quote-currency`.",
              "format": "double",
              "type": "number"
            },
            "from_address": {
              "description": "The address where the transfer is from.",
              "type": "string"
            },
            "from_address_label": {
              "description": "The label of `from` address.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "method_calls": {
              "description": "Additional details on which transfer events were invoked. Defaults to `true`.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/MethodCallsForTransfers"
                }
              },
              "type": "array"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "double",
              "type": "number"
            },
            "to_address": {
              "description": "The address where the transfer is to.",
              "type": "string"
            },
            "to_address_label": {
              "description": "The label of `to` address.",
              "type": "string"
            },
            "transfer_type": {
              "description": "IN/OUT.",
              "type": "string"
            },
            "tx_hash": {
              "description": "The transaction hash.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "TransferResponse": {
          "properties": {
            "address": {
              "description": "The requested wallet address.",
              "type": "string"
            },
            "chain_id": {
              "description": "The requested chain ID.",
              "format": "int64",
              "type": "integer"
            },
            "items": {
              "description": "The transactions.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/BlockTransactionWithContractTransfers"
                }
              },
              "type": "array"
            },
            "next_update_at": {
              "description": "The next updated time.",
              "format": "date-time",
              "type": "string"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "quote_currency": {
              "description": "The requested fiat currency.",
              "type": "string"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "TransferResponse",
      "schema": {
        "properties": {
          "address": {
            "description": "The requested wallet address.",
            "type": "string"
          },
          "chain_id": {
            "description": "The requested chain ID.",
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "description": "The transactions.",
            "items": {
              "items": {
                "$ref": "#/components/schemas/BlockTransactionWithContractTransfers"
              }
            },
            "type": "array"
          },
          "next_update_at": {
            "description": "The next updated time.",
            "format": "date-time",
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "quote_currency": {
            "description": "The requested fiat currency.",
            "type": "string"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": " Basic example to fetch transfer of USDC from an Ethereum address",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "0x197e3eCCD00F07B18205753C638c3E59013A92bf"
          },
          {
            "name": "contract-address",
            "value": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
          }
        ]
      }
    ],
    "title": "Get ERC20 token transfers for address",
    "websocketSupport": false
  },
  {
    "classSubType": "uniswap",
    "classSubTypeDescription": "Uniswap is a fully decentralized protocol for automated liquidity provision on Ethereum. Uniswap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Given `:address`, return pool balances across all Uniswap v2 pools and their quote rates.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 5,
    "params": [
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/1/address/:address/stacks/uniswap_v2/balances/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "BalanceResponseType": {
          "properties": {
            "address": {
              "type": "string"
            },
            "next_update_at": {
              "format": "date-time",
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "uniswap_v2": {
              "$ref": "#/components/schemas/UniswapBalanceWrapper"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "UniswapBalanceWrapper": {
          "properties": {
            "balances": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapV2BalanceItem"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "UniswapToken": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "UniswapTokenWithSupply": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "description": "Total supply of this pool token.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "UniswapV2BalanceItem": {
          "properties": {
            "pool_token": {
              "$ref": "#/components/schemas/UniswapTokenWithSupply"
            },
            "token_0": {
              "$ref": "#/components/schemas/UniswapToken"
            },
            "token_1": {
              "$ref": "#/components/schemas/UniswapToken"
            }
          },
          "type": "object"
        }
      },
      "name": "BalanceResponseType",
      "schema": {
        "properties": {
          "address": {
            "type": "string"
          },
          "next_update_at": {
            "format": "date-time",
            "type": "string"
          },
          "quote_currency": {
            "type": "string"
          },
          "uniswap_v2": {
            "$ref": "#/components/schemas/UniswapBalanceWrapper"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Uniswap v2 address exchange balances",
    "websocketSupport": false
  },
  {
    "classSubType": "uniswap",
    "classSubTypeDescription": "Uniswap is a fully decentralized protocol for automated liquidity provision on Ethereum. Uniswap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Given `:address`, return a list of liquidity additions and removals. Optionally include swaps as well if requested.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 6,
    "params": [
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Get additional insight on swap event data related to this address, default: `false`",
        "global": false,
        "name": "swaps",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "boolean"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/1/address/:address/stacks/uniswap_v2/acts/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "BalanceResponseType": {
          "properties": {
            "address": {
              "type": "string"
            },
            "next_update_at": {
              "format": "date-time",
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "uniswap_v2": {
              "$ref": "#/components/schemas/UniswapBalanceWrapper"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "UniswapBalanceWrapper": {
          "properties": {
            "balances": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapV2BalanceItem"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "UniswapToken": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "UniswapTokenWithSupply": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "description": "Total supply of this pool token.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "UniswapV2BalanceItem": {
          "properties": {
            "pool_token": {
              "$ref": "#/components/schemas/UniswapTokenWithSupply"
            },
            "token_0": {
              "$ref": "#/components/schemas/UniswapToken"
            },
            "token_1": {
              "$ref": "#/components/schemas/UniswapToken"
            }
          },
          "type": "object"
        }
      },
      "name": "BalanceResponseType",
      "schema": {
        "properties": {
          "address": {
            "type": "string"
          },
          "next_update_at": {
            "format": "date-time",
            "type": "string"
          },
          "quote_currency": {
            "type": "string"
          },
          "uniswap_v2": {
            "$ref": "#/components/schemas/UniswapBalanceWrapper"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Uniswap v2 address exchange liquidity transactions",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Given `:chain_id` and `:block_height`, return a single block at `:block_height`. If `:block_height` is set to the value `latest`, return the latest block available.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 6,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The height of the block.",
        "global": false,
        "name": "block_height",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/block_v2/:block_height/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "Block": {
          "properties": {
            "height": {
              "description": "The height of the block.",
              "format": "int32",
              "type": "integer"
            },
            "signed_at": {
              "description": "The signed time of the block.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "SingleBlockResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/Block"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "SingleBlockResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/Block"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Basic example to get latest block of Palm Mainnet",
        "params": [
          {
            "name": "chain_id",
            "value": "11297108109"
          },
          {
            "name": "block_height",
            "value": "latest"
          }
        ]
      }
    ],
    "title": "Get a block",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Given `:chain_id`, `:start_date` and `:end_date`, return all the block height(s) of a particular chain within a date range. If the `:end_date` is set to `latest`, return every block height from the `:start_date` to now.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 7,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The start datetime of the block height(s). (yyyy-MM-ddTHH:mm:ssZ), eg: 2020-01-01 or 2020-01-01T03:36:50z",
        "global": false,
        "name": "start_date",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The ending datetime of the block height(s). (yyyy-MM-ddTHH:mm:ssZ), eg: 2020-01-02 or 2020-01-02T03:36:50z",
        "global": false,
        "name": "end_date",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/block_v2/:start_date/:end_date/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "Block": {
          "properties": {
            "height": {
              "description": "The height of the block.",
              "format": "int32",
              "type": "integer"
            },
            "signed_at": {
              "description": "The signed time of the block.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "SingleBlockResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/Block"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "SingleBlockResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/Block"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Basic example of retrieving block heights given a certain date range",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "start_date",
            "value": "2021-01-01"
          },
          {
            "name": "end_date",
            "value": "2021-01-03"
          }
        ]
      }
    ],
    "title": "Get block heights",
    "websocketSupport": false
  },
  {
    "classSubType": "uniswap",
    "classSubTypeDescription": "Uniswap is a fully decentralized protocol for automated liquidity provision on Ethereum. Uniswap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Given `:address`, return pool balances across all Uniswap pools and their quote rates.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 7,
    "params": [
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/1/address/:address/stacks/uniswap_v1/balances/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "BalanceResponseType": {
          "properties": {
            "address": {
              "type": "string"
            },
            "next_update_at": {
              "format": "date-time",
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "uniswap_v1": {
              "$ref": "#/components/schemas/Container"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Container": {
          "properties": {
            "balances": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapV2BalanceItem"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "UniswapToken": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "UniswapTokenWithSupply": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "description": "Total supply of this pool token.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "UniswapV2BalanceItem": {
          "properties": {
            "pool_token": {
              "$ref": "#/components/schemas/UniswapTokenWithSupply"
            },
            "token_0": {
              "$ref": "#/components/schemas/UniswapToken"
            },
            "token_1": {
              "$ref": "#/components/schemas/UniswapToken"
            }
          },
          "type": "object"
        }
      },
      "name": "BalanceResponseType",
      "schema": {
        "properties": {
          "address": {
            "type": "string"
          },
          "next_update_at": {
            "format": "date-time",
            "type": "string"
          },
          "quote_currency": {
            "type": "string"
          },
          "uniswap_v1": {
            "$ref": "#/components/schemas/Container"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Uniswap v1 address exchange balances",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Given `:chain_id` and contract `:address`, return a paginated list of decoded log events emitted by a particular smart contract.",
    "id": "1",
    "isBeta": false,
    "notes": [
      {
        "description": "sender_logo_url may reference to a not found resource (return status 404).",
        "title": "sender_logo_url field"
      }
    ],
    "order": 8,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Starting block to define a block range.",
        "global": false,
        "name": "starting-block",
        "pathParam": false,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Ending block to define a block range. Passing in `latest` uses the latest block height.",
        "global": false,
        "name": "ending-block",
        "pathParam": false,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/events/address/:address/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "DecodedItem": {
          "description": "The decoded item.",
          "properties": {
            "name": {
              "description": "The name of the decoded item.",
              "type": "string"
            },
            "params": {
              "description": "The parameters of the decoded item.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/DecodedParamItem"
                }
              },
              "type": "array"
            },
            "signature": {
              "description": "The signature of the decoded item.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "DecodedParamItem": {
          "description": "The parameters of the decoded item.",
          "properties": {
            "decoded": {
              "description": "The decoded value of the parameter.",
              "type": "boolean"
            },
            "indexed": {
              "description": "The index of the parameter.",
              "type": "boolean"
            },
            "name": {
              "description": "The name of the parameter.",
              "type": "string"
            },
            "type": {
              "description": "The type of the parameter.",
              "type": "string"
            },
            "value": {
              "description": "The value of the parameter.",
              "type": "object"
            }
          },
          "type": "object"
        },
        "EventsListResponseType": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/LogEventItem"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "LogEventItem": {
          "properties": {
            "block_height": {
              "description": "The height of the block.",
              "format": "int64",
              "type": "integer"
            },
            "block_signed_at": {
              "description": "The signed time of the block.",
              "format": "date-time",
              "type": "string"
            },
            "decoded": {
              "$ref": "#/components/schemas/DecodedItem"
            },
            "log_offset": {
              "description": "The log offset.",
              "format": "int64",
              "type": "integer"
            },
            "raw_log_data": {
              "description": "The log events in raw.",
              "type": "string"
            },
            "raw_log_topics": {
              "items": {
                "items": {
                  "type": "string"
                }
              },
              "type": "array"
            },
            "sender_address": {
              "description": "The address of the sender.",
              "type": "string"
            },
            "sender_address_label": {
              "description": "The label of the sender address.",
              "type": "string"
            },
            "sender_contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "sender_contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "sender_logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "sender_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "tx_hash": {
              "description": "The transaction hash.",
              "type": "string"
            },
            "tx_offset": {
              "description": "The transaction offset.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "EventsListResponseType",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/LogEventItem"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Basic example to fetch log events of a contract address between two block heights",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "0xc0da01a04c3f3e0be433606045bb7017a7323e38"
          },
          {
            "name": "starting-block",
            "value": "12115107"
          },
          {
            "name": "ending-block",
            "value": "12240004"
          }
        ]
      }
    ],
    "title": "Get log events by contract address",
    "websocketSupport": true
  },
  {
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "classType": "Class B",
    "description": "Given `:chain_id` and `:dexname`, return pool information across all `XY=K` pools including LP token prices, reserves, exchange volumes and fees.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 8,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ],
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "global": false,
        "name": "dexname",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `contract-addresses` (a comma separated list) is present, only return the pools that contain these contracts.",
        "global": false,
        "name": "contract-addresses",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `tickers` (a comma separated list) is present, only return the pools that contain these tickers.",
        "global": false,
        "name": "tickers",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/xy=k/:dexname/pools/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "ExchangeVolumeV2": {
          "properties": {
            "annualized_fee": {
              "format": "float",
              "type": "number"
            },
            "block_height": {
              "format": "int32",
              "type": "integer"
            },
            "chain_id": {
              "type": "string"
            },
            "chain_name": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "exchange": {
              "type": "string"
            },
            "fee_24h_quote": {
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "swap_count_24h": {
              "format": "int64",
              "type": "integer"
            },
            "token_0": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "token_1": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "total_liquidity_quote": {
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "type": "integer"
            },
            "volume_24h_quote": {
              "format": "float",
              "type": "number"
            },
            "volume_7d_quote": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "TokenV2": {
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "reserve": {
              "type": "integer"
            },
            "volume_in_24h": {
              "type": "number"
            },
            "volume_in_7d": {
              "type": "number"
            },
            "volume_out_24h": {
              "type": "number"
            },
            "volume_out_7d": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "UniswapLikeExchangeListResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeVolumeV2"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "UniswapLikeExchangeListResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeVolumeV2"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [
      {
        "id": "uniswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "name": "Uniswap V2",
        "supportedChains": [
          "ethereum-mainnet"
        ]
      },
      {
        "id": "sushiswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "id": "pancakeswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "name": "PancakeSwap",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "spiritswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "name": "SpiritSwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "spookyswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "name": "SpookySwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "quickswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "name": "QuickSwap",
        "supportedChains": [
          "matic-mainnet"
        ]
      },
      {
        "id": "apeswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "name": "ApeSwap V2",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "pangolin",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "name": "Pangolin",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "traderjoe",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "name": "Trader Joe",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "standard",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "name": "Standard",
        "supportedChains": [
          "astar-shiden"
        ]
      },
      {
        "id": "katana",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "name": "Katana",
        "supportedChains": [
          "axie-mainnet"
        ]
      },
      {
        "id": "stellaswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "name": "StellaSwap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "beamswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "name": "Beamswap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "empire",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "name": "Empire",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "moonlift",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "name": "MoonLift",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "mimo",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "name": "Mimo",
        "supportedChains": [
          "iotex-mainnet"
        ]
      },
      {
        "id": "claimswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "name": "Claimswap",
        "supportedChains": [
          "klaytn-mainnet"
        ]
      }
    ],
    "templates": [],
    "title": "Get XY=K pools",
    "websocketSupport": false
  },
  {
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "classType": "Class B",
    "description": "Given `:chain_id`, `:dexname` and `:address`, return pool information across all `XY=K` pools including LP token prices, reserves, exchange volumes and fees for address.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 9,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ],
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "global": false,
        "name": "dexname",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `tickers` (a comma separated list) is present, only return the pools that contain these tickers.",
        "global": false,
        "name": "tickers",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/xy=k/:dexname/pools/address/:address/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "ExchangeVolumeV2": {
          "properties": {
            "annualized_fee": {
              "format": "float",
              "type": "number"
            },
            "block_height": {
              "format": "int32",
              "type": "integer"
            },
            "chain_id": {
              "type": "string"
            },
            "chain_name": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "exchange": {
              "type": "string"
            },
            "fee_24h_quote": {
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "swap_count_24h": {
              "format": "int64",
              "type": "integer"
            },
            "token_0": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "token_1": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "total_liquidity_quote": {
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "type": "integer"
            },
            "volume_24h_quote": {
              "format": "float",
              "type": "number"
            },
            "volume_7d_quote": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "TokenV2": {
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "reserve": {
              "type": "integer"
            },
            "volume_in_24h": {
              "type": "number"
            },
            "volume_in_7d": {
              "type": "number"
            },
            "volume_out_24h": {
              "type": "number"
            },
            "volume_out_7d": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "UniswapLikeExchangeListResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeVolumeV2"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "UniswapLikeExchangeListResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeVolumeV2"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [
      {
        "id": "uniswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "name": "Uniswap V2",
        "supportedChains": [
          "ethereum-mainnet"
        ]
      },
      {
        "id": "sushiswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "id": "pancakeswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "name": "PancakeSwap",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "spiritswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "name": "SpiritSwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "spookyswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "name": "SpookySwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "quickswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "name": "QuickSwap",
        "supportedChains": [
          "matic-mainnet"
        ]
      },
      {
        "id": "apeswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "name": "ApeSwap V2",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "pangolin",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "name": "Pangolin",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "traderjoe",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "name": "Trader Joe",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "standard",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "name": "Standard",
        "supportedChains": [
          "astar-shiden"
        ]
      },
      {
        "id": "katana",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "name": "Katana",
        "supportedChains": [
          "axie-mainnet"
        ]
      },
      {
        "id": "stellaswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "name": "StellaSwap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "beamswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "name": "Beamswap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "empire",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "name": "Empire",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "moonlift",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "name": "MoonLift",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "mimo",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "name": "Mimo",
        "supportedChains": [
          "iotex-mainnet"
        ]
      },
      {
        "id": "claimswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "name": "Claimswap",
        "supportedChains": [
          "klaytn-mainnet"
        ]
      }
    ],
    "templates": [],
    "title": "Get XY=K pools by address",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Given `:chain_id` and `:topic` hash(es), return a paginated list of decoded log events with one or more topic hashes separated by a comma.",
    "id": "1",
    "isBeta": false,
    "notes": [
      {
        "description": "Topic hash can be calculated using our topic hash calculator in our documentation section.",
        "title": "Topic hash details"
      },
      {
        "description": "sender_logo_url may reference to a not found resource (return status 404).",
        "title": "sender_logo_url field"
      }
    ],
    "order": 9,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Topic hash value from log records.",
        "global": false,
        "name": "topic",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Additional topic hash(es) to filter on -- padded \u0026 unpadded address fields are supported.",
        "global": false,
        "name": "secondary-topics",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Starting block to define a block range.",
        "global": false,
        "name": "starting-block",
        "pathParam": false,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Ending block to define a block range. Passing in `latest` uses the latest block height.",
        "global": false,
        "name": "ending-block",
        "pathParam": false,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The address of the sender.",
        "global": false,
        "name": "sender-address",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/events/topics/:topic/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "DecodedItem": {
          "description": "The decoded item.",
          "properties": {
            "name": {
              "description": "The name of the decoded item.",
              "type": "string"
            },
            "params": {
              "description": "The parameters of the decoded item.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/DecodedParamItem"
                }
              },
              "type": "array"
            },
            "signature": {
              "description": "The signature of the decoded item.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "DecodedParamItem": {
          "description": "The parameters of the decoded item.",
          "properties": {
            "decoded": {
              "description": "The decoded value of the parameter.",
              "type": "boolean"
            },
            "indexed": {
              "description": "The index of the parameter.",
              "type": "boolean"
            },
            "name": {
              "description": "The name of the parameter.",
              "type": "string"
            },
            "type": {
              "description": "The type of the parameter.",
              "type": "string"
            },
            "value": {
              "description": "The value of the parameter.",
              "type": "object"
            }
          },
          "type": "object"
        },
        "EventsListResponseType": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/LogEventItem"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "LogEventItem": {
          "properties": {
            "block_height": {
              "description": "The height of the block.",
              "format": "int64",
              "type": "integer"
            },
            "block_signed_at": {
              "description": "The signed time of the block.",
              "format": "date-time",
              "type": "string"
            },
            "decoded": {
              "$ref": "#/components/schemas/DecodedItem"
            },
            "log_offset": {
              "description": "The log offset.",
              "format": "int64",
              "type": "integer"
            },
            "raw_log_data": {
              "description": "The log events in raw.",
              "type": "string"
            },
            "raw_log_topics": {
              "items": {
                "items": {
                  "type": "string"
                }
              },
              "type": "array"
            },
            "sender_address": {
              "description": "The address of the sender.",
              "type": "string"
            },
            "sender_address_label": {
              "description": "The label of the sender address.",
              "type": "string"
            },
            "sender_contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "sender_contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "sender_logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "sender_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "tx_hash": {
              "description": "The transaction hash.",
              "type": "string"
            },
            "tx_offset": {
              "description": "The transaction offset.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "EventsListResponseType",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/LogEventItem"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Basic example to fetch a topic hash between two block heights on Ethereum",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "topic",
            "value": "0x804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a"
          },
          {
            "name": "starting-block",
            "value": "12500000"
          },
          {
            "name": "ending-block",
            "value": "12500100"
          },
          {
            "name": "sender-address",
            "value": "0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9"
          }
        ]
      }
    ],
    "title": "Get log events by topic hash(es)",
    "websocketSupport": true
  },
  {
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "classType": "Class B",
    "description": "Given `:chain_id`, `:dexname` and `:address`, return address exchange balances for a specific DEX.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 10,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ],
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "global": false,
        "name": "dexname",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/xy=k/:dexname/address/:address/balances/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "BalanceResponseType": {
          "properties": {
            "address": {
              "type": "string"
            },
            "next_update_at": {
              "format": "date-time",
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "uniswap_v2": {
              "$ref": "#/components/schemas/ContainerU"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ContainerU": {
          "properties": {
            "balances": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapV2BalanceItem"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "UniswapToken": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "UniswapTokenWithSupply": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "description": "Total supply of this pool token.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "UniswapV2BalanceItem": {
          "properties": {
            "pool_token": {
              "$ref": "#/components/schemas/UniswapTokenWithSupply"
            },
            "token_0": {
              "$ref": "#/components/schemas/UniswapToken"
            },
            "token_1": {
              "$ref": "#/components/schemas/UniswapToken"
            }
          },
          "type": "object"
        }
      },
      "name": "BalanceResponseType",
      "schema": {
        "properties": {
          "address": {
            "type": "string"
          },
          "next_update_at": {
            "format": "date-time",
            "type": "string"
          },
          "quote_currency": {
            "type": "string"
          },
          "uniswap_v2": {
            "$ref": "#/components/schemas/ContainerU"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [
      {
        "id": "uniswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "name": "Uniswap V2",
        "supportedChains": [
          "ethereum-mainnet"
        ]
      },
      {
        "id": "sushiswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "id": "pancakeswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "name": "PancakeSwap",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "spiritswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "name": "SpiritSwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "spookyswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "name": "SpookySwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "quickswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "name": "QuickSwap",
        "supportedChains": [
          "matic-mainnet"
        ]
      },
      {
        "id": "apeswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "name": "ApeSwap V2",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "pangolin",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "name": "Pangolin",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "traderjoe",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "name": "Trader Joe",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "standard",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "name": "Standard",
        "supportedChains": [
          "astar-shiden"
        ]
      },
      {
        "id": "katana",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "name": "Katana",
        "supportedChains": [
          "axie-mainnet"
        ]
      },
      {
        "id": "stellaswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "name": "StellaSwap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "beamswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "name": "Beamswap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "empire",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "name": "Empire",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "moonlift",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "name": "MoonLift",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "mimo",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "name": "Mimo",
        "supportedChains": [
          "iotex-mainnet"
        ]
      },
      {
        "id": "claimswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "name": "Claimswap",
        "supportedChains": [
          "klaytn-mainnet"
        ]
      }
    ],
    "templates": [],
    "title": "Get XY=K address exchange balances",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Given `:chain_id` and wallet `:address`, return a paginated list of token holders. If `:block-height` is omitted, the latest block is used.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 10,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Ending block to define a block range. Passing in `latest` uses the latest block height.",
        "global": false,
        "name": "block-height",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/tokens/:address/token_holders/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "TokenHolder": {
          "properties": {
            "address": {
              "description": "The address of token holder.",
              "type": "string"
            },
            "balance": {
              "description": "The balance of token holder.",
              "type": "number"
            },
            "block_height": {
              "description": "The height of the block.",
              "format": "int64",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            },
            "total_supply": {
              "description": "The total supply of the token.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "TokenHolderResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/TokenHolder"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "TokenHolderResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/TokenHolder"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Basic example of a list of token holders for Theta Token",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "0x3883f5e181fccaf8410fa61e12b59bad963fb645"
          }
        ]
      }
    ],
    "title": "Get token holders as of any block height",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Given `:chain_id` and wallet `:address`, return a paginated list of token holders and their current/historical balances, where the token balance of the token holder changes between `:starting-block` and `:ending-block`.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 11,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Starting block to define a block range.",
        "global": false,
        "name": "starting-block",
        "pathParam": false,
        "primer": false,
        "required": true,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "Ending block to define a block range.",
        "global": false,
        "name": "ending-block",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/tokens/:address/token_holders_changes/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "TokenHolderDiff": {
          "properties": {
            "diff": {
              "description": "The difference of the balance.",
              "type": "number"
            },
            "next_balance": {
              "description": "The ending block balance.",
              "type": "number"
            },
            "next_block_height": {
              "description": "The ending block height.",
              "format": "int64",
              "type": "integer"
            },
            "prev_balance": {
              "description": "The starting block balance.",
              "type": "number"
            },
            "prev_block_height": {
              "description": "The starting block height.",
              "format": "int64",
              "type": "integer"
            },
            "token_holder": {
              "description": "The token holder.",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "TokenHolderDiff",
      "schema": {
        "properties": {
          "diff": {
            "description": "The difference of the balance.",
            "type": "number"
          },
          "next_balance": {
            "description": "The ending block balance.",
            "type": "number"
          },
          "next_block_height": {
            "description": "The ending block height.",
            "format": "int64",
            "type": "integer"
          },
          "prev_balance": {
            "description": "The starting block balance.",
            "type": "number"
          },
          "prev_block_height": {
            "description": "The starting block height.",
            "format": "int64",
            "type": "integer"
          },
          "token_holder": {
            "description": "The token holder.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Basic example of changes in token holders of Theta token between two block_heights",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "0x3883f5e181fccaf8410fa61e12b59bad963fb645"
          },
          {
            "name": "starting-block",
            "value": "12500100"
          },
          {
            "name": "ending-block",
            "value": "13210000"
          }
        ]
      }
    ],
    "title": "Get changes in token holders between two block heights",
    "websocketSupport": false
  },
  {
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "classType": "Class B",
    "description": "Given `:chain_id` and `:dexname`, return network exchange tokens for a specific DEX.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 11,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ],
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "global": false,
        "name": "dexname",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/:chain_id/xy=k/:dexname/tokens/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "NetworkExchangeTokenResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/TokenV2Volume"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "TokenV2Volume": {
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "chain_name": {
              "type": "string"
            },
            "contract_address": {
              "type": "string"
            },
            "contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "swap_count_24h": {
              "format": "int64",
              "type": "integer"
            },
            "total_liquidity": {
              "type": "integer"
            },
            "total_liquidity_quote": {
              "format": "float",
              "type": "number"
            },
            "total_volume_24h": {
              "type": "number"
            },
            "total_volume_24h_quote": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        }
      },
      "name": "NetworkExchangeTokenResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/TokenV2Volume"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [
      {
        "id": "uniswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "name": "Uniswap V2",
        "supportedChains": [
          "ethereum-mainnet"
        ]
      },
      {
        "id": "sushiswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "id": "pancakeswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "name": "PancakeSwap",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "spiritswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "name": "SpiritSwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "spookyswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "name": "SpookySwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "quickswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "name": "QuickSwap",
        "supportedChains": [
          "matic-mainnet"
        ]
      },
      {
        "id": "apeswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "name": "ApeSwap V2",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "pangolin",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "name": "Pangolin",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "traderjoe",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "name": "Trader Joe",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "standard",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "name": "Standard",
        "supportedChains": [
          "astar-shiden"
        ]
      },
      {
        "id": "katana",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "name": "Katana",
        "supportedChains": [
          "axie-mainnet"
        ]
      },
      {
        "id": "stellaswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "name": "StellaSwap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "beamswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "name": "Beamswap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "empire",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "name": "Empire",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "moonlift",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "name": "MoonLift",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "mimo",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "name": "Mimo",
        "supportedChains": [
          "iotex-mainnet"
        ]
      },
      {
        "id": "claimswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "name": "Claimswap",
        "supportedChains": [
          "klaytn-mainnet"
        ]
      }
    ],
    "templates": [],
    "title": "Get XY=K network exchange tokens",
    "websocketSupport": false
  },
  {
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "classType": "Class B",
    "description": "Returns a list of DEXes currently supported by the XY=K endpoints.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 11,
    "params": [],
    "path": "/v1/xy=k/supported_dexes/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "BalanceResponseType": {
          "properties": {
            "address": {
              "type": "string"
            },
            "next_update_at": {
              "format": "date-time",
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "uniswap_v2": {
              "$ref": "#/components/schemas/ContainerU"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ContainerU": {
          "properties": {
            "balances": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapV2BalanceItem"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "UniswapToken": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "UniswapTokenWithSupply": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "description": "Total supply of this pool token.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "UniswapV2BalanceItem": {
          "properties": {
            "pool_token": {
              "$ref": "#/components/schemas/UniswapTokenWithSupply"
            },
            "token_0": {
              "$ref": "#/components/schemas/UniswapToken"
            },
            "token_1": {
              "$ref": "#/components/schemas/UniswapToken"
            }
          },
          "type": "object"
        }
      },
      "name": "BalanceResponseType",
      "schema": {
        "properties": {
          "address": {
            "type": "string"
          },
          "next_update_at": {
            "format": "date-time",
            "type": "string"
          },
          "quote_currency": {
            "type": "string"
          },
          "uniswap_v2": {
            "$ref": "#/components/schemas/ContainerU"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get XY=K supported DEXes",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Given `:chain_id` and `:contract_address`, return a list of all token IDs for the NFT contract on the blockchain.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 12,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Smart contract address.",
        "global": false,
        "name": "contract_address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/tokens/:contract_address/nft_token_ids/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "TokenIdResponse": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            },
            "token_id": {
              "description": "The list of token ids under the contract address.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "TokenIdResponseType": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/TokenIdResponse"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "TokenIdResponseType",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/TokenIdResponse"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Get token IDs for Meme Ltd",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "contract_address",
            "value": "0xe4605d46fd0b3f8329d936a8b258d69276cba264"
          }
        ]
      }
    ],
    "title": "Get NFT token IDs for contract",
    "websocketSupport": false
  },
  {
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "classType": "Class B",
    "description": "Given `:chain_id`, `:dexname` and `:token_address`, return single network exchange token for a specific DEX.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 12,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "token address",
        "global": false,
        "name": "token_address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ],
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "global": false,
        "name": "dexname",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `tickers` (a comma separated list) is present, only return the pools that contain these tickers.",
        "global": false,
        "name": "tickers",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/:chain_id/xy=k/:dexname/tokens/address/:token_address/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "ExchangeVolumeWithVolumeAndLiquidityTimeseries": {
          "properties": {
            "annualized_fee": {
              "format": "float",
              "type": "number"
            },
            "block_height": {
              "format": "int32",
              "type": "integer"
            },
            "chain_id": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "exchange": {
              "type": "string"
            },
            "fee_24h_quote": {
              "format": "float",
              "type": "number"
            },
            "liquidity_timeseries_30d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeLiquidityChartWithQuote"
                }
              },
              "type": "array"
            },
            "liquidity_timeseries_7d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeLiquidityChartWithQuote"
                }
              },
              "type": "array"
            },
            "price_timeseries_30d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikePriceChartWithQuote"
                }
              },
              "type": "array"
            },
            "price_timeseries_7d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikePriceChartWithQuote"
                }
              },
              "type": "array"
            },
            "quote_currency": {
              "type": "string"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "swap_count_24h": {
              "format": "int64",
              "type": "integer"
            },
            "token0_reserve_quote": {
              "format": "float",
              "type": "number"
            },
            "token1_reserve_quote": {
              "format": "float",
              "type": "number"
            },
            "token_0": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "token_1": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "total_liquidity_quote": {
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "type": "integer"
            },
            "volume_24h_quote": {
              "format": "float",
              "type": "number"
            },
            "volume_7d_quote": {
              "format": "float",
              "type": "number"
            },
            "volume_timeseries_30d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeVolumeChartWithQuote"
                }
              },
              "type": "array"
            },
            "volume_timeseries_7d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeVolumeChartWithQuote"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "SingleNetworkExchangeTokenResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeVolumeWithVolumeAndLiquidityTimeseries"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "TokenV2": {
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "reserve": {
              "type": "integer"
            },
            "volume_in_24h": {
              "type": "number"
            },
            "volume_in_7d": {
              "type": "number"
            },
            "volume_out_24h": {
              "type": "number"
            },
            "volume_out_7d": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "UniswapLikeLiquidityChartWithQuote": {
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "dt": {
              "format": "date-time",
              "type": "string"
            },
            "exchange": {
              "type": "string"
            },
            "liquidity_quote": {
              "format": "float",
              "type": "number"
            },
            "r0_c": {
              "type": "number"
            },
            "r1_c": {
              "type": "number"
            },
            "token0_quote_rate": {
              "format": "float",
              "type": "number"
            },
            "token1_quote_rate": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "UniswapLikePriceChartWithQuote": {
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "dt": {
              "format": "date-time",
              "type": "string"
            },
            "exchange": {
              "type": "string"
            },
            "price_of_token0_in_quote_currency": {
              "format": "float",
              "type": "number"
            },
            "price_of_token0_in_token1": {
              "format": "float",
              "type": "number"
            },
            "price_of_token0_in_token1_description": {
              "type": "string"
            },
            "price_of_token1_in_quote_currency": {
              "format": "float",
              "type": "number"
            },
            "price_of_token1_in_token0": {
              "format": "float",
              "type": "number"
            },
            "price_of_token1_in_token0_description": {
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "UniswapLikeVolumeChartWithQuote": {
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "dt": {
              "format": "date-time",
              "type": "string"
            },
            "exchange": {
              "type": "string"
            },
            "sum_amount0in": {
              "type": "number"
            },
            "sum_amount0out": {
              "type": "number"
            },
            "sum_amount1in": {
              "type": "number"
            },
            "sum_amount1out": {
              "type": "number"
            },
            "swap_count_24": {
              "format": "int64",
              "type": "integer"
            },
            "token0_quote_rate": {
              "format": "float",
              "type": "number"
            },
            "token1_quote_rate": {
              "format": "float",
              "type": "number"
            },
            "volume_quote": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        }
      },
      "name": "SingleNetworkExchangeTokenResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeVolumeWithVolumeAndLiquidityTimeseries"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [
      {
        "id": "uniswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "name": "Uniswap V2",
        "supportedChains": [
          "ethereum-mainnet"
        ]
      },
      {
        "id": "sushiswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "id": "pancakeswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "name": "PancakeSwap",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "spiritswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "name": "SpiritSwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "spookyswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "name": "SpookySwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "quickswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "name": "QuickSwap",
        "supportedChains": [
          "matic-mainnet"
        ]
      },
      {
        "id": "apeswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "name": "ApeSwap V2",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "pangolin",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "name": "Pangolin",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "traderjoe",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "name": "Trader Joe",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "standard",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "name": "Standard",
        "supportedChains": [
          "astar-shiden"
        ]
      },
      {
        "id": "katana",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "name": "Katana",
        "supportedChains": [
          "axie-mainnet"
        ]
      },
      {
        "id": "stellaswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "name": "StellaSwap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "beamswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "name": "Beamswap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "empire",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "name": "Empire",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "moonlift",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "name": "MoonLift",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "mimo",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "name": "Mimo",
        "supportedChains": [
          "iotex-mainnet"
        ]
      },
      {
        "id": "claimswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "name": "Claimswap",
        "supportedChains": [
          "klaytn-mainnet"
        ]
      }
    ],
    "templates": [],
    "title": "Get XY=K single network exchange token",
    "websocketSupport": false
  },
  {
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "classType": "Class B",
    "description": "Given `:chain_id`, `:dexname` and `:address`, return transactions for account address for a specific DEX.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 13,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ],
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "global": false,
        "name": "dexname",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/xy=k/:dexname/address/:address/transactions/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "AccountAddressTransactionsResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeTransaction"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ContractMetadata": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ExchangeTransaction": {
          "properties": {
            "act": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "amount_0": {
              "type": "number"
            },
            "amount_0_in": {
              "type": "number"
            },
            "amount_0_out": {
              "type": "number"
            },
            "amount_1": {
              "type": "number"
            },
            "amount_1_in": {
              "type": "number"
            },
            "amount_1_out": {
              "type": "number"
            },
            "block_signed_at": {
              "format": "date-time",
              "type": "string"
            },
            "from_address": {
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "sender_address": {
              "type": "string"
            },
            "to_address": {
              "type": "string"
            },
            "token_0": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "token_0_quote_rate": {
              "format": "float",
              "type": "number"
            },
            "token_1": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "token_1_quote_rate": {
              "format": "float",
              "type": "number"
            },
            "total_quote": {
              "format": "float",
              "type": "number"
            },
            "tx_hash": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "AccountAddressTransactionsResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeTransaction"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [
      {
        "id": "uniswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "name": "Uniswap V2",
        "supportedChains": [
          "ethereum-mainnet"
        ]
      },
      {
        "id": "sushiswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "id": "pancakeswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "name": "PancakeSwap",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "spiritswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "name": "SpiritSwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "spookyswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "name": "SpookySwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "quickswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "name": "QuickSwap",
        "supportedChains": [
          "matic-mainnet"
        ]
      },
      {
        "id": "apeswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "name": "ApeSwap V2",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "pangolin",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "name": "Pangolin",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "traderjoe",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "name": "Trader Joe",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "standard",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "name": "Standard",
        "supportedChains": [
          "astar-shiden"
        ]
      },
      {
        "id": "katana",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "name": "Katana",
        "supportedChains": [
          "axie-mainnet"
        ]
      },
      {
        "id": "stellaswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "name": "StellaSwap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "beamswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "name": "Beamswap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "empire",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "name": "Empire",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "moonlift",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "name": "MoonLift",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "mimo",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "name": "Mimo",
        "supportedChains": [
          "iotex-mainnet"
        ]
      },
      {
        "id": "claimswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "name": "Claimswap",
        "supportedChains": [
          "klaytn-mainnet"
        ]
      }
    ],
    "templates": [],
    "title": "Get XY=K transactions for account address",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Given `:chain_id`, `:contract_address` and `:token_id`, return a list of transactions.",
    "id": "1",
    "isBeta": false,
    "notes": [
      {
        "description": "sender_logo_url may reference to a not found resource (return status 404).",
        "title": "sender_logo_url field"
      }
    ],
    "order": 13,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Smart contract address.",
        "global": false,
        "name": "contract_address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The token ID",
        "global": false,
        "name": "token_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/tokens/:contract_address/nft_transactions/:token_id/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "BlockTransactionWithLogEvents": {
          "description": "The nft transactions.",
          "properties": {
            "block_height": {
              "description": "The height of the block.",
              "format": "int32",
              "type": "integer"
            },
            "block_signed_at": {
              "description": "The signed time of the block.",
              "format": "date-time",
              "type": "string"
            },
            "from_address": {
              "description": "The address where the transaction is from.",
              "type": "string"
            },
            "from_address_label": {
              "description": "The label of `from` address.",
              "type": "string"
            },
            "gas_offered": {
              "description": "The gas offered for this tx.",
              "format": "int64",
              "type": "integer"
            },
            "gas_price": {
              "description": "The gas price at the time of this tx.",
              "format": "int64",
              "type": "integer"
            },
            "gas_quote": {
              "description": "The gas spent in `quote-currency` denomination.",
              "format": "double",
              "type": "number"
            },
            "gas_quote_rate": {
              "description": "The gas exchange rate at the time of Tx in `quote_currency`.",
              "format": "double",
              "type": "number"
            },
            "gas_spent": {
              "description": "The gas spent for this tx.",
              "format": "int64",
              "type": "integer"
            },
            "log_events": {
              "description": "The log events.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/LogEventItem"
                }
              },
              "type": "array"
            },
            "successful": {
              "description": "The transaction status.",
              "type": "boolean"
            },
            "to_address": {
              "description": "The address where the transaction is to.",
              "type": "string"
            },
            "to_address_label": {
              "description": "The label of `to` address.",
              "type": "string"
            },
            "tx_hash": {
              "description": "The transaction hash.",
              "type": "string"
            },
            "tx_offset": {
              "description": "The transaction offset.",
              "format": "int32",
              "type": "integer"
            },
            "value": {
              "description": "The value attached to this tx.",
              "type": "number"
            },
            "value_quote": {
              "description": "The value attached in `quote-currency` to this tx.",
              "format": "double",
              "type": "number"
            }
          },
          "type": "object"
        },
        "DecodedItem": {
          "description": "The decoded item.",
          "properties": {
            "name": {
              "description": "The name of the decoded item.",
              "type": "string"
            },
            "params": {
              "description": "The parameters of the decoded item.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/DecodedParamItem"
                }
              },
              "type": "array"
            },
            "signature": {
              "description": "The signature of the decoded item.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "DecodedParamItem": {
          "description": "The parameters of the decoded item.",
          "properties": {
            "decoded": {
              "description": "The decoded value of the parameter.",
              "type": "boolean"
            },
            "indexed": {
              "description": "The index of the parameter.",
              "type": "boolean"
            },
            "name": {
              "description": "The name of the parameter.",
              "type": "string"
            },
            "type": {
              "description": "The type of the parameter.",
              "type": "string"
            },
            "value": {
              "description": "The value of the parameter.",
              "type": "object"
            }
          },
          "type": "object"
        },
        "LogEventItem": {
          "description": "The log events.",
          "properties": {
            "block_height": {
              "description": "The height of the block.",
              "format": "int64",
              "type": "integer"
            },
            "block_signed_at": {
              "description": "The signed time of the block.",
              "format": "date-time",
              "type": "string"
            },
            "decoded": {
              "$ref": "#/components/schemas/DecodedItem"
            },
            "log_offset": {
              "description": "The log offset.",
              "format": "int64",
              "type": "integer"
            },
            "raw_log_data": {
              "description": "The log events in raw.",
              "type": "string"
            },
            "raw_log_topics": {
              "items": {
                "items": {
                  "type": "string"
                }
              },
              "type": "array"
            },
            "sender_address": {
              "description": "The address of the sender.",
              "type": "string"
            },
            "sender_address_label": {
              "description": "The label of the sender address.",
              "type": "string"
            },
            "sender_contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "sender_contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "sender_logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "sender_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "tx_hash": {
              "description": "The transaction hash.",
              "type": "string"
            },
            "tx_offset": {
              "description": "The transaction offset.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "NftTransactionsResponse": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "nft_transactions": {
              "description": "The nft transactions.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/BlockTransactionWithLogEvents"
                }
              },
              "type": "array"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            },
            "type": {
              "description": "One of `cryptocurrency`, `stablecoin`, `nft` or `dust`.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "NftTransactionsResponseType": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/NftTransactionsResponse"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "NftTransactionsResponseType",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/NftTransactionsResponse"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Get list of NFT transactions given Meme Ltd token ID",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "contract_address",
            "value": "0xe4605d46fd0b3f8329d936a8b258d69276cba264"
          },
          {
            "name": "token_id",
            "value": "123"
          }
        ]
      }
    ],
    "title": "Get NFT transactions for contract",
    "websocketSupport": false
  },
  {
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "classType": "Class B",
    "description": "Given `:chain_id`, `:dexname` and `:token_address`, return transactions for token address for a specific DEX.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 14,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "token address",
        "global": false,
        "name": "token_address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ],
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "global": false,
        "name": "dexname",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/:chain_id/xy=k/:dexname/tokens/address/:token_address/transactions/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "ContractMetadata": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ExchangeTransaction": {
          "properties": {
            "act": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "amount_0": {
              "type": "number"
            },
            "amount_0_in": {
              "type": "number"
            },
            "amount_0_out": {
              "type": "number"
            },
            "amount_1": {
              "type": "number"
            },
            "amount_1_in": {
              "type": "number"
            },
            "amount_1_out": {
              "type": "number"
            },
            "block_signed_at": {
              "format": "date-time",
              "type": "string"
            },
            "from_address": {
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "sender_address": {
              "type": "string"
            },
            "to_address": {
              "type": "string"
            },
            "token_0": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "token_0_quote_rate": {
              "format": "float",
              "type": "number"
            },
            "token_1": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "token_1_quote_rate": {
              "format": "float",
              "type": "number"
            },
            "total_quote": {
              "format": "float",
              "type": "number"
            },
            "tx_hash": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "TokenAddressTransactionsResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeTransaction"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "TokenAddressTransactionsResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeTransaction"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [
      {
        "id": "uniswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "name": "Uniswap V2",
        "supportedChains": [
          "ethereum-mainnet"
        ]
      },
      {
        "id": "sushiswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "id": "pancakeswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "name": "PancakeSwap",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "spiritswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "name": "SpiritSwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "spookyswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "name": "SpookySwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "quickswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "name": "QuickSwap",
        "supportedChains": [
          "matic-mainnet"
        ]
      },
      {
        "id": "apeswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "name": "ApeSwap V2",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "pangolin",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "name": "Pangolin",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "traderjoe",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "name": "Trader Joe",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "standard",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "name": "Standard",
        "supportedChains": [
          "astar-shiden"
        ]
      },
      {
        "id": "katana",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "name": "Katana",
        "supportedChains": [
          "axie-mainnet"
        ]
      },
      {
        "id": "stellaswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "name": "StellaSwap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "beamswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "name": "Beamswap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "empire",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "name": "Empire",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "moonlift",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "name": "MoonLift",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "mimo",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "name": "Mimo",
        "supportedChains": [
          "iotex-mainnet"
        ]
      },
      {
        "id": "claimswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "name": "Claimswap",
        "supportedChains": [
          "klaytn-mainnet"
        ]
      }
    ],
    "templates": [],
    "title": "Get XY=K transactions for token address",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Given `:chain_id`, `:contract_address` and `:token_id`, fetch and return the external metadata. Both ERC721 as well as ERC1155 standards are supported.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 14,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Smart contract address.",
        "global": false,
        "name": "contract_address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The token ID",
        "global": false,
        "name": "token_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/tokens/:contract_address/nft_metadata/:token_id/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "INFTMetadata": {
          "description": "Array of NFTs that are held under this contract.",
          "type": "object"
        },
        "NFTMetaDataRsponseType": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/WalletBalanceItem"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "WalletBalanceItem": {
          "properties": {
            "balance": {
              "description": "The asset balance. Use `contract_decimals` to scale this balance for display purposes.",
              "type": "integer"
            },
            "balance_24h": {
              "description": "The asset balance 24 hours ago.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "last_transferred_at": {
              "description": "Last transferred date for a wallet",
              "format": "date-time",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "nft_data": {
              "description": "Array of NFTs that are held under this contract.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/INFTMetadata"
                }
              },
              "type": "array"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_24h": {
              "description": "The current balance converted to fiat in `quote-currency` as of 24 hours ago.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate_24h": {
              "description": "The spot exchange rate in `quote-currency` as of 24 hours ago.",
              "format": "float",
              "type": "number"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            },
            "type": {
              "description": "One of `cryptocurrency`, `stablecoin`, `nft` or `dust`.",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "NFTMetaDataRsponseType",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/WalletBalanceItem"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Get NFT external metadata given Meme Ltd token ID",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "contract_address",
            "value": "0xe4605d46fd0b3f8329d936a8b258d69276cba264"
          },
          {
            "name": "token_id",
            "value": "123"
          }
        ]
      }
    ],
    "title": "Get NFT external metadata for contract",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Given `:chain_id`, return all collection addresses and their market data.",
    "id": "1",
    "isBeta": true,
    "notes": [],
    "order": 15,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The start day of the historical market data. (YYYY-MM-DD)",
        "global": false,
        "name": "from",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The end day of the historical market data. (YYYY-MM-DD)",
        "global": false,
        "name": "to",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/nft_market/",
    "realTime": false,
    "released_at": "2022-01-12",
    "response": {
      "components": {
        "NftMarketCapResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/NftMarketGlobalItem"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "NftMarketGlobalItem": {
          "properties": {
            "avg_volume_quote_24h": {
              "description": "Average volume of sales within last 24H in quote currency.",
              "format": "float",
              "type": "number"
            },
            "avg_volume_wei_24h": {
              "description": "Average volume of sales within last 24H in WEI.",
              "type": "number"
            },
            "chain_id": {
              "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
              "format": "int64",
              "type": "integer"
            },
            "collection_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "collection_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_deployment_at": {
              "description": "Contract deployment date.",
              "format": "date-time",
              "type": "string"
            },
            "first_nft_image": {
              "description": "The Image URL of the First NFT in this collection.",
              "type": "string"
            },
            "first_nft_image_1024": {
              "description": "The Image URL of the First NFT in this collection (resized to 1024x1024).",
              "type": "string"
            },
            "first_nft_image_256": {
              "description": "The Image URL of the First NFT in this collection (resized to 256x256).",
              "type": "string"
            },
            "first_nft_image_512": {
              "description": "The Image URL of the First NFT in this collection (resized to 512x512).",
              "type": "string"
            },
            "first_nft_image_token_id": {
              "description": "The Token Id for the Image URL of the First NFT in this collection.",
              "type": "string"
            },
            "floor_price_quote_7d": {
              "description": "The minimum average sale within the last 7 days defined as floor price in quote currency.",
              "format": "float",
              "type": "number"
            },
            "floor_price_wei_7d": {
              "description": "The minimum average sale within the last 7 days defined as floor price in WEI.",
              "type": "number"
            },
            "gas_quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "market_cap_quote": {
              "description": "Market Cap in quote currency.",
              "format": "float",
              "type": "number"
            },
            "market_cap_wei": {
              "description": "Market Cap in WEI.",
              "type": "number"
            },
            "max_price_quote": {
              "description": "The max price recorded as a sale in quote currency.",
              "format": "float",
              "type": "number"
            },
            "max_price_wei": {
              "description": "The max price recorded as a sale in WEI.",
              "type": "number"
            },
            "opening_date": {
              "description": "Date recorded for Market Cap.",
              "format": "date",
              "type": "string"
            },
            "quote_currency": {
              "description": "The requested fiat currency.",
              "type": "string"
            },
            "transaction_count_alltime": {
              "description": "Number of transactions for this collection.",
              "format": "int32",
              "type": "integer"
            },
            "unique_token_ids_sold_count_alltime": {
              "description": "Amount of distinct token ids sold.",
              "format": "int32",
              "type": "integer"
            },
            "unique_wallet_purchase_count_alltime": {
              "description": "Number of wallets for this collection.",
              "format": "int32",
              "type": "integer"
            },
            "volume_quote_24h": {
              "description": "Volume of sales within the last 24H in quote currency.",
              "format": "float",
              "type": "number"
            },
            "volume_wei_24h": {
              "description": "Volume of sales within the last 24H in WEI.",
              "type": "number"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "NftMarketCapResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/NftMarketGlobalItem"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [
      {
        "id": "opensea",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Opensea.png",
        "name": "OpenSea",
        "supportedChains": [
          "eth-mainnet",
          "matic-mainnet"
        ]
      },
      {
        "id": "nftrade",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/NFTrade.png",
        "name": "NFTrade",
        "supportedChains": [
          "eth-mainnet",
          "avalanche-mainnet",
          "matic-mainnet",
          "moonbeam-moonriver"
        ]
      },
      {
        "id": "foundation",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Foundation.png",
        "name": "Foundation",
        "supportedChains": [
          "eth-mainnet"
        ]
      },
      {
        "id": "refinable",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Refinable.png",
        "name": "Refinable",
        "supportedChains": [
          "eth-mainnet",
          "matic-mainnet"
        ]
      },
      {
        "id": "artion",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Artion.png",
        "name": "Artion",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "rarible",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Rarible.png",
        "name": "Rarible",
        "supportedChains": [
          "eth-mainnet"
        ]
      },
      {
        "id": "treasure",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Treasure.png",
        "name": "Treasure",
        "supportedChains": [
          "arbitrum-mainnet"
        ]
      },
      {
        "id": "looksrare",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Looksrare.png",
        "name": "LooksRare",
        "supportedChains": [
          "eth-mainnet"
        ]
      },
      {
        "id": "cryptopunks",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Cryptopunks.png",
        "name": "Cryptopunks",
        "supportedChains": [
          "eth-mainnet"
        ]
      },
      {
        "id": "tofunft",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/TofuNFT.png",
        "name": "TofuNFT",
        "supportedChains": [
          "fantom-mainnet",
          "astar-shiden",
          "moonbeam-moonriver",
          "arbitrum-mainnet",
          "avalanche-mainnet"
        ]
      },
      {
        "id": "decentraland",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Decentraland.png",
        "name": "Decentraland",
        "supportedChains": [
          "eth-mainnet",
          "matic-mainnet"
        ]
      },
      {
        "id": "superrare",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/SuperRare.png",
        "name": "SuperRare",
        "supportedChains": [
          "eth-mainnet"
        ]
      },
      {
        "id": "axie-infinity",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/AxieInfinity.png",
        "name": "Axie Infinity",
        "supportedChains": [
          "axie-mainnet"
        ]
      },
      {
        "id": "zora",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Zora.png",
        "name": "Zora",
        "supportedChains": [
          "eth-mainnet"
        ]
      },
      {
        "id": "playdapp",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/PlayDapp.png",
        "name": "PlayDapp",
        "supportedChains": [
          "eth-mainnet"
        ]
      }
    ],
    "templates": [
      {
        "description": "Basic example of fetching NFT Market Data for NFTs on the Ethereum blockchain",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          }
        ]
      }
    ],
    "title": "Get NFT market global view",
    "websocketSupport": false
  },
  {
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "classType": "Class B",
    "description": "Given `:chain_id`, `:dexname` and `:address`, return transactions for exchange for a specific DEX.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 15,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ],
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "global": false,
        "name": "dexname",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/xy=k/:dexname/pools/address/:address/transactions/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "ContractMetadata": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ExchangeTransaction": {
          "properties": {
            "act": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "amount_0": {
              "type": "number"
            },
            "amount_0_in": {
              "type": "number"
            },
            "amount_0_out": {
              "type": "number"
            },
            "amount_1": {
              "type": "number"
            },
            "amount_1_in": {
              "type": "number"
            },
            "amount_1_out": {
              "type": "number"
            },
            "block_signed_at": {
              "format": "date-time",
              "type": "string"
            },
            "from_address": {
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "sender_address": {
              "type": "string"
            },
            "to_address": {
              "type": "string"
            },
            "token_0": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "token_0_quote_rate": {
              "format": "float",
              "type": "number"
            },
            "token_1": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "token_1_quote_rate": {
              "format": "float",
              "type": "number"
            },
            "total_quote": {
              "format": "float",
              "type": "number"
            },
            "tx_hash": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "ExchangeTransactionsResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeTransaction"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "ExchangeTransactionsResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeTransaction"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [
      {
        "id": "uniswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "name": "Uniswap V2",
        "supportedChains": [
          "ethereum-mainnet"
        ]
      },
      {
        "id": "sushiswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "id": "pancakeswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "name": "PancakeSwap",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "spiritswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "name": "SpiritSwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "spookyswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "name": "SpookySwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "quickswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "name": "QuickSwap",
        "supportedChains": [
          "matic-mainnet"
        ]
      },
      {
        "id": "apeswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "name": "ApeSwap V2",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "pangolin",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "name": "Pangolin",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "traderjoe",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "name": "Trader Joe",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "standard",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "name": "Standard",
        "supportedChains": [
          "astar-shiden"
        ]
      },
      {
        "id": "katana",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "name": "Katana",
        "supportedChains": [
          "axie-mainnet"
        ]
      },
      {
        "id": "stellaswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "name": "StellaSwap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "beamswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "name": "Beamswap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "empire",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "name": "Empire",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "moonlift",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "name": "MoonLift",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "mimo",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "name": "Mimo",
        "supportedChains": [
          "iotex-mainnet"
        ]
      },
      {
        "id": "claimswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "name": "Claimswap",
        "supportedChains": [
          "klaytn-mainnet"
        ]
      }
    ],
    "templates": [],
    "title": "Get XY=K transactions for exchange",
    "websocketSupport": false
  },
  {
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "classType": "Class B",
    "description": "Given `:chain_id` and `:dexname`, return ecosystem chart data for a specific DEX.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 16,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ],
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "global": false,
        "name": "dexname",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/xy=k/:dexname/ecosystem/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "EcosystemResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeEcosystemCharts"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "UniswapLikeEcosystemCharts": {
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "gas_token_price_quote": {
              "format": "float",
              "type": "number"
            },
            "liquidity_chart_30d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeLiquidityEcosystemChart"
                }
              },
              "type": "array"
            },
            "liquidity_chart_7d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeLiquidityEcosystemChart"
                }
              },
              "type": "array"
            },
            "quote_currency": {
              "type": "string"
            },
            "total_active_pairs_7d": {
              "format": "int64",
              "type": "integer"
            },
            "total_fees_24h": {
              "format": "float",
              "type": "number"
            },
            "total_swaps_24h": {
              "format": "int64",
              "type": "integer"
            },
            "volume_chart_30d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeVolumeEcosystemChart"
                }
              },
              "type": "array"
            },
            "volume_chart_7d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeVolumeEcosystemChart"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "UniswapLikeLiquidityEcosystemChart": {
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "dt": {
              "format": "date-time",
              "type": "string"
            },
            "liquidity_quote": {
              "format": "float",
              "type": "number"
            },
            "quote_currency": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "UniswapLikeVolumeEcosystemChart": {
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "dt": {
              "format": "date-time",
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "swap_count_24": {
              "format": "int64",
              "type": "integer"
            },
            "volume_quote": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        }
      },
      "name": "EcosystemResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/UniswapLikeEcosystemCharts"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [
      {
        "id": "uniswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "name": "Uniswap V2",
        "supportedChains": [
          "ethereum-mainnet"
        ]
      },
      {
        "id": "sushiswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "id": "pancakeswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "name": "PancakeSwap",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "spiritswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "name": "SpiritSwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "spookyswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "name": "SpookySwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "quickswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "name": "QuickSwap",
        "supportedChains": [
          "matic-mainnet"
        ]
      },
      {
        "id": "apeswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "name": "ApeSwap V2",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "pangolin",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "name": "Pangolin",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "traderjoe",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "name": "Trader Joe",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "standard",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "name": "Standard",
        "supportedChains": [
          "astar-shiden"
        ]
      },
      {
        "id": "katana",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "name": "Katana",
        "supportedChains": [
          "axie-mainnet"
        ]
      },
      {
        "id": "stellaswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "name": "StellaSwap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "beamswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "name": "Beamswap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "empire",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "name": "Empire",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "moonlift",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "name": "MoonLift",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "mimo",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "name": "Mimo",
        "supportedChains": [
          "iotex-mainnet"
        ]
      },
      {
        "id": "claimswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "name": "Claimswap",
        "supportedChains": [
          "klaytn-mainnet"
        ]
      }
    ],
    "templates": [],
    "title": "Get XY=K ecosystem chart data",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Given `:chain_id` and `:collection_address`, return a detailed view of the specified collection address and their time series data in day granularity.",
    "id": "1",
    "isBeta": true,
    "notes": [
      {
        "description": "Shows the time series data of average price and volume in day granularity.",
        "title": "Time series data"
      }
    ],
    "order": 16,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Specified collection address",
        "global": false,
        "name": "collection_address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The start day of the historical volume and average price. (YYYY-MM-DD)",
        "global": false,
        "name": "from",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The end day of the historical volume and average price. (YYYY-MM-DD)",
        "global": false,
        "name": "to",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/nft_market/collection/:collection_address/",
    "realTime": true,
    "released_at": "2022-01-12",
    "response": {
      "components": {
        "NftMarketCapDetailedViewItem": {
          "properties": {
            "average_volume_quote_day": {
              "description": "Average volume of sale within that day in quote currency.",
              "format": "float",
              "type": "number"
            },
            "average_volume_wei_day": {
              "description": "Average volume of sale within that day in WEI.",
              "type": "number"
            },
            "chain_id": {
              "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
              "format": "int64",
              "type": "integer"
            },
            "collection_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "collection_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "collection_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "fifth_nft_image": {
              "description": "The Image URL of the Fifth NFT in this collection.",
              "type": "string"
            },
            "fifth_nft_image_1024": {
              "description": "The Image URL of the Fifth NFT in this collection (resized to 1024x1024).",
              "type": "string"
            },
            "fifth_nft_image_256": {
              "description": "The Image URL of the Fifth NFT in this collection (resized to 256x256).",
              "type": "string"
            },
            "fifth_nft_image_512": {
              "description": "The Image URL of the Fifth NFT in this collection (resized to 512x512).",
              "type": "string"
            },
            "fifth_nft_image_token_id": {
              "description": "The Token Id for the Image URL of the Fifth NFT in this collection.",
              "type": "string"
            },
            "first_nft_image": {
              "description": "The Image URL of the First NFT in this collection.",
              "type": "string"
            },
            "first_nft_image_1024": {
              "description": "The Image URL of the First NFT in this collection (resized to 1024x1024).",
              "type": "string"
            },
            "first_nft_image_256": {
              "description": "The Image URL of the First NFT in this collection (resized to 256x256).",
              "type": "string"
            },
            "first_nft_image_512": {
              "description": "The Image URL of the First NFT in this collection (resized to 512x512).",
              "type": "string"
            },
            "first_nft_image_token_id": {
              "description": "The Token Id for the Image URL of the First NFT in this collection.",
              "type": "string"
            },
            "floor_price_quote_7d": {
              "description": "The minimum average sale within the last 7 days defined as floor price in quote currency.",
              "format": "float",
              "type": "number"
            },
            "floor_price_wei_7d": {
              "description": "The minimum average sale within the last 7 days defined as floor price in WEI.",
              "type": "number"
            },
            "fourth_nft_image": {
              "description": "The Image URL of the Fourth NFT in this collection.",
              "type": "string"
            },
            "fourth_nft_image_1024": {
              "description": "The Image URL of the Fourth NFT in this collection (resized to 1024x1024).",
              "type": "string"
            },
            "fourth_nft_image_256": {
              "description": "The Image URL of the Fourth NFT in this collection (resized to 256x256).",
              "type": "string"
            },
            "fourth_nft_image_512": {
              "description": "The Image URL of the Fourth NFT in this collection (resized to 512x512).",
              "type": "string"
            },
            "fourth_nft_image_token_id": {
              "description": "The Token Id for the Image URL of the Fourth NFT in this collection.",
              "type": "string"
            },
            "gas_quote_rate_day": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "opening_date": {
              "description": "Date recorded for Market Cap.",
              "format": "date",
              "type": "string"
            },
            "quote_currency": {
              "description": "The requested fiat currency.",
              "type": "string"
            },
            "second_nft_image": {
              "description": "The Image URL of the Second NFT in this collection.",
              "type": "string"
            },
            "second_nft_image_1024": {
              "description": "The Image URL of the Second NFT in this collection (resized to 1024x1024).",
              "type": "string"
            },
            "second_nft_image_256": {
              "description": "The Image URL of the Second NFT in this collection (resized to 256x256).",
              "type": "string"
            },
            "second_nft_image_512": {
              "description": "The Image URL of the Second NFT in this collection (resized to 512x512).",
              "type": "string"
            },
            "second_nft_image_token_id": {
              "description": "The Token Id for the Image URL of the Second NFT in this collection.",
              "type": "string"
            },
            "third_nft_image": {
              "description": "The Image URL of the Third NFT in this collection.",
              "type": "string"
            },
            "third_nft_image_1024": {
              "description": "The Image URL of the Third NFT in this collection (resized to 1024x1024).",
              "type": "string"
            },
            "third_nft_image_256": {
              "description": "The Image URL of the Third NFT in this collection (resized to 256x256).",
              "type": "string"
            },
            "third_nft_image_512": {
              "description": "The Image URL of the Third NFT in this collection (resized to 512x512).",
              "type": "string"
            },
            "third_nft_image_token_id": {
              "description": "The Token Id for the Image URL of the Third NFT in this collection.",
              "type": "string"
            },
            "unique_token_ids_sold_count_day": {
              "description": "Amount of distinct token ids sold.",
              "format": "int64",
              "type": "integer"
            },
            "volume_quote_day": {
              "description": "Volume of sale within that day in quote currency.",
              "format": "float",
              "type": "number"
            },
            "volume_wei_day": {
              "description": "Volume of sale within that day in WEI.",
              "type": "number"
            }
          },
          "type": "object"
        },
        "NftMarketCapDetailedViewResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/NftMarketCapDetailedViewItem"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "NftMarketCapDetailedViewResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/NftMarketCapDetailedViewItem"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [
      {
        "id": "opensea",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Opensea.png",
        "name": "OpenSea",
        "supportedChains": [
          "eth-mainnet",
          "matic-mainnet"
        ]
      },
      {
        "id": "nftrade",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/NFTrade.png",
        "name": "NFTrade",
        "supportedChains": [
          "eth-mainnet",
          "bsc-mainnet",
          "avalanche-mainnet",
          "matic-mainnet",
          "moonbeam-moonriver"
        ]
      },
      {
        "id": "foundation",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Foundation.png",
        "name": "Foundation",
        "supportedChains": [
          "eth-mainnet"
        ]
      },
      {
        "id": "refinable",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Refinable.png",
        "name": "Refinable",
        "supportedChains": [
          "eth-mainnet",
          "matic-mainnet",
          "bsc-mainnet"
        ]
      },
      {
        "id": "artion",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Artion.png",
        "name": "Artion",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "rarible",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Rarible.png",
        "name": "Rarible",
        "supportedChains": [
          "eth-mainnet"
        ]
      },
      {
        "id": "treasure",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Treasure.png",
        "name": "Treasure",
        "supportedChains": [
          "arbitrum-mainnet"
        ]
      },
      {
        "id": "looksrare",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Looksrare.png",
        "name": "LooksRare",
        "supportedChains": [
          "eth-mainnet"
        ]
      },
      {
        "id": "cryptopunks",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Cryptopunks.png",
        "name": "Cryptopunks",
        "supportedChains": [
          "eth-mainnet"
        ]
      },
      {
        "id": "tofunft",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/TofuNFT.png",
        "name": "TofuNFT",
        "supportedChains": [
          "fantom-mainnet",
          "astar-shiden",
          "moonbeam-moonriver",
          "arbitrum-mainnet",
          "avalanche-mainnet"
        ]
      },
      {
        "id": "decentraland",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Decentraland.png",
        "name": "Decentraland",
        "supportedChains": [
          "eth-mainnet",
          "matic-mainnet"
        ]
      },
      {
        "id": "superrare",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/SuperRare.png",
        "name": "SuperRare",
        "supportedChains": [
          "eth-mainnet"
        ]
      },
      {
        "id": "axie-infinity",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/AxieInfinity.png",
        "name": "Axie Infinity",
        "supportedChains": [
          "axie-mainnet"
        ]
      },
      {
        "id": "zora",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/Zora.png",
        "name": "Zora",
        "supportedChains": [
          "eth-mainnet"
        ]
      },
      {
        "id": "playdapp",
        "logoURL": "https://www.covalenthq.com/static/images/nft-marketplaces/PlayDapp.png",
        "name": "PlayDapp",
        "supportedChains": [
          "eth-mainnet"
        ]
      }
    ],
    "templates": [
      {
        "description": "Basic example of fetching time series data for Bored Ape Yacht Club",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "collection_address",
            "value": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d"
          }
        ]
      }
    ],
    "title": "Get historical data for NFT collection",
    "websocketSupport": false
  },
  {
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "classType": "Class B",
    "description": "Given `:chain_id` and `:dexname`, return last synced block height data and latest block height for a specific DEX.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 17,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ],
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "global": false,
        "name": "dexname",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/:chain_id/xy=k/:dexname/health/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "HealthData": {
          "properties": {
            "latest_block_height": {
              "format": "int32",
              "type": "integer"
            },
            "latest_block_signed_at": {
              "format": "date-time",
              "type": "string"
            },
            "synced_block_height": {
              "format": "int32",
              "type": "integer"
            },
            "synced_block_signed_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "HealthDataResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/HealthData"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "HealthDataResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/HealthData"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [
      {
        "id": "uniswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "name": "Uniswap V2",
        "supportedChains": [
          "ethereum-mainnet"
        ]
      },
      {
        "id": "sushiswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "id": "pancakeswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "name": "PancakeSwap",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "spiritswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "name": "SpiritSwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "spookyswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "name": "SpookySwap",
        "supportedChains": [
          "fantom-mainnet"
        ]
      },
      {
        "id": "quickswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "name": "QuickSwap",
        "supportedChains": [
          "matic-mainnet"
        ]
      },
      {
        "id": "apeswapv2",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "name": "ApeSwap V2",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "pangolin",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "name": "Pangolin",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "traderjoe",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "name": "Trader Joe",
        "supportedChains": [
          "avalanche-mainnet"
        ]
      },
      {
        "id": "standard",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "name": "Standard",
        "supportedChains": [
          "astar-shiden"
        ]
      },
      {
        "id": "katana",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "name": "Katana",
        "supportedChains": [
          "axie-mainnet"
        ]
      },
      {
        "id": "stellaswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "name": "StellaSwap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "beamswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "name": "Beamswap",
        "supportedChains": [
          "moonbeam-mainnet"
        ]
      },
      {
        "id": "empire",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "name": "Empire",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "moonlift",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "name": "MoonLift",
        "supportedChains": [
          "bsc-mainnet"
        ]
      },
      {
        "id": "mimo",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "name": "Mimo",
        "supportedChains": [
          "iotex-mainnet"
        ]
      },
      {
        "id": "claimswap",
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "name": "Claimswap",
        "supportedChains": [
          "klaytn-mainnet"
        ]
      }
    ],
    "templates": [],
    "title": "Get XY=K health data",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Given `:chain_id` and `:id`, return a list of all contracts on a blockchain along with their metadata.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 17,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Supports `56` for BSC Mainnet and `137` for Polygon/Matic Mainnet, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Only `all` supported right now.",
        "global": false,
        "name": "id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "global": true,
        "name": "format",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/tokens/tokenlists/:id/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "ContractMetadata": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "name": "ContractMetadata",
      "schema": {
        "properties": {
          "contract_address": {
            "description": "Smart contract address.",
            "type": "string"
          },
          "contract_decimals": {
            "description": "Smart contract decimals.",
            "format": "int32",
            "type": "integer"
          },
          "contract_name": {
            "description": "Smart contract name.",
            "type": "string"
          },
          "contract_ticker_symbol": {
            "description": "Smart contract ticker symbol.",
            "type": "string"
          },
          "logo_url": {
            "description": "Smart contract URL.",
            "type": "string"
          },
          "supports_erc": {
            "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
            "items": {
              "items": {
                "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                "type": "string"
              }
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Basic example to get contract metadata of all the contracts on polygon",
        "params": [
          {
            "name": "chain_id",
            "value": "137"
          },
          {
            "name": "id",
            "value": "all"
          }
        ]
      }
    ],
    "title": "Get all contract metadata",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Returns a list of all chains.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 18,
    "params": [],
    "path": "/v1/chains/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "AllChainInfoResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/GenericChainInfoDisplay"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "GenericChainInfoDisplay": {
          "properties": {
            "chain_id": {
              "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
              "type": "string"
            },
            "db_schema_name": {
              "type": "string"
            },
            "is_testnet": {
              "type": "boolean"
            },
            "label": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            },
            "name": {
              "description": "Name of chain",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "AllChainInfoResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/GenericChainInfoDisplay"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get all chains",
    "websocketSupport": false
  },
  {
    "classSubType": "pancakeswap",
    "classSubTypeDescription": "Trade, earn, and win crypto on the most popular decentralized platform in the galaxy. PancakeSwap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Return a paginated list of Pancake V2 pools sorted by exchange volume. Only pools with swaps in the last 24 hours are included.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 18,
    "params": [
      {
        "choices": [],
        "description": "If `tickers` (a comma separated list) is present, only return the pools that contain these tickers.",
        "global": false,
        "name": "tickers",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `contract-addresses` (a comma separated list) is present, only return the pools that contain these contracts.",
        "global": false,
        "name": "contract-addresses",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/56/networks/pancakeswap_v2/assets/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "ExchangeVolumeV2": {
          "properties": {
            "annualized_fee": {
              "format": "float",
              "type": "number"
            },
            "block_height": {
              "format": "int32",
              "type": "integer"
            },
            "chain_id": {
              "type": "string"
            },
            "chain_name": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "exchange": {
              "type": "string"
            },
            "fee_24h_quote": {
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "swap_count_24h": {
              "format": "int64",
              "type": "integer"
            },
            "token_0": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "token_1": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "total_liquidity_quote": {
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "type": "integer"
            },
            "volume_24h_quote": {
              "format": "float",
              "type": "number"
            },
            "volume_7d_quote": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "SushiswapExchangeListResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeVolumeV2"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "TokenV2": {
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "reserve": {
              "type": "integer"
            },
            "volume_in_24h": {
              "type": "number"
            },
            "volume_in_7d": {
              "type": "number"
            },
            "volume_out_24h": {
              "type": "number"
            },
            "volume_out_7d": {
              "type": "number"
            }
          },
          "type": "object"
        }
      },
      "name": "SushiswapExchangeListResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeVolumeV2"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Pancakeswap v2 pools",
    "websocketSupport": false
  },
  {
    "classSubType": "pancakeswap",
    "classSubTypeDescription": "Trade, earn, and win crypto on the most popular decentralized platform in the galaxy. PancakeSwap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Given `:address`, return detailed pool information for the specified pool `:address`.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 19,
    "params": [
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `tickers` (a comma separated list) is present, only return the pools that contain these tickers.",
        "global": false,
        "name": "tickers",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/56/networks/pancakeswap_v2/assets/:address/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "ExchangeVolumeV2": {
          "properties": {
            "annualized_fee": {
              "format": "float",
              "type": "number"
            },
            "block_height": {
              "format": "int32",
              "type": "integer"
            },
            "chain_id": {
              "type": "string"
            },
            "chain_name": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "exchange": {
              "type": "string"
            },
            "fee_24h_quote": {
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "swap_count_24h": {
              "format": "int64",
              "type": "integer"
            },
            "token_0": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "token_1": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "total_liquidity_quote": {
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "type": "integer"
            },
            "volume_24h_quote": {
              "format": "float",
              "type": "number"
            },
            "volume_7d_quote": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "SushiswapExchangeListResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeVolumeV2"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "TokenV2": {
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "reserve": {
              "type": "integer"
            },
            "volume_in_24h": {
              "type": "number"
            },
            "volume_in_7d": {
              "type": "number"
            },
            "volume_out_24h": {
              "type": "number"
            },
            "volume_out_7d": {
              "type": "number"
            }
          },
          "type": "object"
        }
      },
      "name": "SushiswapExchangeListResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeVolumeV2"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Pancakeswap v2 pools by address",
    "websocketSupport": false
  },
  {
    "classSubType": "",
    "classSubTypeDescription": "",
    "classType": "Class A",
    "description": "Returns a list of all chain statuses.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 19,
    "params": [],
    "path": "/v1/chains/status/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "ChainStatusResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/GenericChainInfoStatusDisplay"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "GenericChainInfoStatusDisplay": {
          "properties": {
            "chain_id": {
              "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
              "type": "string"
            },
            "is_testnet": {
              "type": "boolean"
            },
            "logo_url": {
              "type": "string"
            },
            "name": {
              "description": "Name of chain",
              "type": "string"
            },
            "synced_block_height": {
              "description": "The height of the block.",
              "format": "int32",
              "type": "integer"
            },
            "synced_blocked_signed_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "ChainStatusResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/GenericChainInfoStatusDisplay"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get all chain statuses",
    "websocketSupport": false
  },
  {
    "classSubType": "pancakeswap",
    "classSubTypeDescription": "Trade, earn, and win crypto on the most popular decentralized platform in the galaxy. PancakeSwap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Given wallet `:address`, return a list of Pancake V2 exchange balances.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 20,
    "params": [
      {
        "choices": [],
        "description": "The requested wallet address.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/56/address/:address/stacks/pancakeswap_v2/balances/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "BalanceResponseType": {
          "properties": {
            "address": {
              "type": "string"
            },
            "next_update_at": {
              "format": "date-time",
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "uniswap_v2": {
              "$ref": "#/components/schemas/ContainerU"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ContainerU": {
          "properties": {
            "balances": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapV2BalanceItem"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "UniswapToken": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "UniswapTokenWithSupply": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "description": "Total supply of this pool token.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "UniswapV2BalanceItem": {
          "properties": {
            "pool_token": {
              "$ref": "#/components/schemas/UniswapTokenWithSupply"
            },
            "token_0": {
              "$ref": "#/components/schemas/UniswapToken"
            },
            "token_1": {
              "$ref": "#/components/schemas/UniswapToken"
            }
          },
          "type": "object"
        }
      },
      "name": "BalanceResponseType",
      "schema": {
        "properties": {
          "address": {
            "type": "string"
          },
          "next_update_at": {
            "format": "date-time",
            "type": "string"
          },
          "quote_currency": {
            "type": "string"
          },
          "uniswap_v2": {
            "$ref": "#/components/schemas/ContainerU"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Pancakeswap v2 address exchange balances",
    "websocketSupport": false
  },
  {
    "classSubType": "pancakeswap",
    "classSubTypeDescription": "Trade, earn, and win crypto on the most popular decentralized platform in the galaxy. PancakeSwap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Return Pancakeswap v2 network exchange tokens.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 21,
    "params": [
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/56/networks/pancakeswap_v2/tokens/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "NetworkV2ExchangeTokenResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/TokenV2Volume"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "TokenV2Volume": {
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "chain_name": {
              "type": "string"
            },
            "contract_address": {
              "type": "string"
            },
            "contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "swap_count_24h": {
              "format": "int64",
              "type": "integer"
            },
            "total_liquidity": {
              "type": "integer"
            },
            "total_liquidity_quote": {
              "format": "float",
              "type": "number"
            },
            "total_volume_24h": {
              "type": "number"
            },
            "total_volume_24h_quote": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        }
      },
      "name": "NetworkV2ExchangeTokenResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/TokenV2Volume"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Pancakeswap v2 network exchange tokens",
    "websocketSupport": false
  },
  {
    "classSubType": "pancakeswap",
    "classSubTypeDescription": "Trade, earn, and win crypto on the most popular decentralized platform in the galaxy. PancakeSwap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Given `:token_address`, return Pancakeswap v2 single network exchange token for token address.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 22,
    "params": [
      {
        "choices": [],
        "description": "token address",
        "global": false,
        "name": "token_address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `tickers` (a comma separated list) is present, only return the pools that contain these tickers.",
        "global": false,
        "name": "tickers",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/56/networks/pancakeswap_v2/tokens/:token_address/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "ExchangeVolumeWithVolumeAndLiquidityTimeseries": {
          "properties": {
            "annualized_fee": {
              "format": "float",
              "type": "number"
            },
            "block_height": {
              "format": "int32",
              "type": "integer"
            },
            "chain_id": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "exchange": {
              "type": "string"
            },
            "fee_24h_quote": {
              "format": "float",
              "type": "number"
            },
            "liquidity_timeseries_30d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/PancakeLiquidityChartWithQuote"
                }
              },
              "type": "array"
            },
            "liquidity_timeseries_7d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/PancakeLiquidityChartWithQuote"
                }
              },
              "type": "array"
            },
            "price_timeseries_30d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/PancakePriceChartWithQuote"
                }
              },
              "type": "array"
            },
            "price_timeseries_7d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/PancakePriceChartWithQuote"
                }
              },
              "type": "array"
            },
            "quote_currency": {
              "type": "string"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "swap_count_24h": {
              "format": "int64",
              "type": "integer"
            },
            "token0_reserve_quote": {
              "format": "float",
              "type": "number"
            },
            "token1_reserve_quote": {
              "format": "float",
              "type": "number"
            },
            "token_0": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "token_1": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "total_liquidity_quote": {
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "type": "integer"
            },
            "volume_24h_quote": {
              "format": "float",
              "type": "number"
            },
            "volume_7d_quote": {
              "format": "float",
              "type": "number"
            },
            "volume_timeseries_30d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/PancakeVolumeChartWithQuote"
                }
              },
              "type": "array"
            },
            "volume_timeseries_7d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/PancakeVolumeChartWithQuote"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "PancakeLiquidityChartWithQuote": {
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "dt": {
              "format": "date-time",
              "type": "string"
            },
            "exchange": {
              "type": "string"
            },
            "liquidity_quote": {
              "format": "float",
              "type": "number"
            },
            "r0_c": {
              "type": "number"
            },
            "r1_c": {
              "type": "number"
            },
            "token0_quote_rate": {
              "format": "float",
              "type": "number"
            },
            "token1_quote_rate": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "PancakePriceChartWithQuote": {
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "dt": {
              "format": "date-time",
              "type": "string"
            },
            "exchange": {
              "type": "string"
            },
            "price_of_token0_in_quote_currency": {
              "format": "float",
              "type": "number"
            },
            "price_of_token0_in_token1": {
              "format": "float",
              "type": "number"
            },
            "price_of_token0_in_token1_description": {
              "type": "string"
            },
            "price_of_token1_in_quote_currency": {
              "format": "float",
              "type": "number"
            },
            "price_of_token1_in_token0": {
              "format": "float",
              "type": "number"
            },
            "price_of_token1_in_token0_description": {
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "PancakeVolumeChartWithQuote": {
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "dt": {
              "format": "date-time",
              "type": "string"
            },
            "exchange": {
              "type": "string"
            },
            "sum_amount0in": {
              "type": "number"
            },
            "sum_amount0out": {
              "type": "number"
            },
            "sum_amount1in": {
              "type": "number"
            },
            "sum_amount1out": {
              "type": "number"
            },
            "swap_count_24": {
              "format": "int64",
              "type": "integer"
            },
            "token0_quote_rate": {
              "format": "float",
              "type": "number"
            },
            "token1_quote_rate": {
              "format": "float",
              "type": "number"
            },
            "volume_quote": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "SingleNetworkV2ExchangeTokenResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeVolumeWithVolumeAndLiquidityTimeseries"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "TokenV2": {
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "reserve": {
              "type": "integer"
            },
            "volume_in_24h": {
              "type": "number"
            },
            "volume_in_7d": {
              "type": "number"
            },
            "volume_out_24h": {
              "type": "number"
            },
            "volume_out_7d": {
              "type": "number"
            }
          },
          "type": "object"
        }
      },
      "name": "SingleNetworkV2ExchangeTokenResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeVolumeWithVolumeAndLiquidityTimeseries"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Pancakeswap v2 single network exchange token",
    "websocketSupport": false
  },
  {
    "classSubType": "pancakeswap",
    "classSubTypeDescription": "Trade, earn, and win crypto on the most popular decentralized platform in the galaxy. PancakeSwap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Return Pancakeswap v2 ecosystem chart data.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 23,
    "params": [
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/56/networks/pancakeswap_v2/ecosystem/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "PancakeEcosystemCharts": {
          "properties": {
            "bnb_price_quote": {
              "format": "float",
              "type": "number"
            },
            "chain_id": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "liquidity_chart_30d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/PancakeLiquidityEcosystemChart"
                }
              },
              "type": "array"
            },
            "liquidity_chart_7d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/PancakeLiquidityEcosystemChart"
                }
              },
              "type": "array"
            },
            "quote_currency": {
              "type": "string"
            },
            "total_active_pairs_7d": {
              "format": "int64",
              "type": "integer"
            },
            "total_fees_24h": {
              "format": "float",
              "type": "number"
            },
            "total_swaps_24h": {
              "format": "int64",
              "type": "integer"
            },
            "volume_chart_30d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/PancakeVolumeEcosystemChart"
                }
              },
              "type": "array"
            },
            "volume_chart_7d": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/PancakeVolumeEcosystemChart"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "PancakeLiquidityEcosystemChart": {
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "dt": {
              "format": "date-time",
              "type": "string"
            },
            "liquidity_quote": {
              "format": "float",
              "type": "number"
            },
            "quote_currency": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "PancakeVolumeEcosystemChart": {
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "dt": {
              "format": "date-time",
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "swap_count_24": {
              "format": "int64",
              "type": "integer"
            },
            "volume_quote": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "PancakeswapV2Ecosystem": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/PancakeEcosystemCharts"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "PancakeswapV2Ecosystem",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/PancakeEcosystemCharts"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Pancakeswap v2 ecosystem chart data",
    "websocketSupport": false
  },
  {
    "classSubType": "pancakeswap",
    "classSubTypeDescription": "Trade, earn, and win crypto on the most popular decentralized platform in the galaxy. PancakeSwap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Return pool information across all Pancakeswap pools including LP token prices, reserves, exchange volumes and fees.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 24,
    "params": [
      {
        "choices": [],
        "description": "If `tickers` (a comma separated list) is present, only return the pools that contain these tickers.",
        "global": false,
        "name": "tickers",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `contract-addresses` (a comma separated list) is present, only return the pools that contain these contracts.",
        "global": false,
        "name": "contract-addresses",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/56/networks/pancakeswap/assets/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "ExchangeVolumeV2": {
          "properties": {
            "annualized_fee": {
              "format": "float",
              "type": "number"
            },
            "block_height": {
              "format": "int32",
              "type": "integer"
            },
            "chain_id": {
              "type": "string"
            },
            "chain_name": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "exchange": {
              "type": "string"
            },
            "fee_24h_quote": {
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "swap_count_24h": {
              "format": "int64",
              "type": "integer"
            },
            "token_0": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "token_1": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "total_liquidity_quote": {
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "type": "integer"
            },
            "volume_24h_quote": {
              "format": "float",
              "type": "number"
            },
            "volume_7d_quote": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "SushiswapExchangeListResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeVolumeV2"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "TokenV2": {
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "reserve": {
              "type": "integer"
            },
            "volume_in_24h": {
              "type": "number"
            },
            "volume_in_7d": {
              "type": "number"
            },
            "volume_out_24h": {
              "type": "number"
            },
            "volume_out_7d": {
              "type": "number"
            }
          },
          "type": "object"
        }
      },
      "name": "SushiswapExchangeListResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeVolumeV2"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Pancakeswap pools",
    "websocketSupport": false
  },
  {
    "classSubType": "pancakeswap",
    "classSubTypeDescription": "Trade, earn, and win crypto on the most popular decentralized platform in the galaxy. PancakeSwap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Given wallet `:address`, return a list of Pancake exchange balances.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 25,
    "params": [
      {
        "choices": [],
        "description": "The requested wallet address.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/56/address/:address/stacks/pancakeswap/balances/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "BalanceResponseType": {
          "properties": {
            "address": {
              "type": "string"
            },
            "next_update_at": {
              "format": "date-time",
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "uniswap_v2": {
              "$ref": "#/components/schemas/ContainerU"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ContainerU": {
          "properties": {
            "balances": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapV2BalanceItem"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "UniswapToken": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "UniswapTokenWithSupply": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "description": "Total supply of this pool token.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "UniswapV2BalanceItem": {
          "properties": {
            "pool_token": {
              "$ref": "#/components/schemas/UniswapTokenWithSupply"
            },
            "token_0": {
              "$ref": "#/components/schemas/UniswapToken"
            },
            "token_1": {
              "$ref": "#/components/schemas/UniswapToken"
            }
          },
          "type": "object"
        }
      },
      "name": "BalanceResponseType",
      "schema": {
        "properties": {
          "address": {
            "type": "string"
          },
          "next_update_at": {
            "format": "date-time",
            "type": "string"
          },
          "quote_currency": {
            "type": "string"
          },
          "uniswap_v2": {
            "$ref": "#/components/schemas/ContainerU"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Pancakeswap address exchange balances",
    "websocketSupport": false
  },
  {
    "classSubType": "pancakeswap",
    "classSubTypeDescription": "Trade, earn, and win crypto on the most popular decentralized platform in the galaxy. PancakeSwap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Given wallet `:address`, return a list of Pancake address exchange liquidity transactions.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 26,
    "params": [
      {
        "choices": [],
        "description": "The requested wallet address.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Get additional insight on swap event data related to this address, default: `false`",
        "global": false,
        "name": "swaps",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "boolean"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/56/address/:address/stacks/pancakeswap/acts/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "ActivityResponse": {
          "properties": {
            "address": {
              "description": "The requested wallet address.",
              "type": "string"
            },
            "chain_id": {
              "description": "The requested chain ID.",
              "format": "int64",
              "type": "integer"
            },
            "items": {
              "description": "The transactions.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/SushiswapActivityItem"
                }
              },
              "type": "array"
            },
            "next_update_at": {
              "description": "The next updated time.",
              "format": "date-time",
              "type": "string"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "quote_currency": {
              "description": "The requested fiat currency.",
              "type": "string"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "SushiswapActivityItem": {
          "description": "The transactions.",
          "properties": {
            "act": {
              "type": "string"
            },
            "act_at": {
              "format": "date-time",
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "pool_token": {
              "$ref": "#/components/schemas/SushiswapTokenWithSupply"
            },
            "token_0": {
              "$ref": "#/components/schemas/SushiswapToken"
            },
            "token_1": {
              "$ref": "#/components/schemas/SushiswapToken"
            },
            "tx_hash": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "SushiswapToken": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "SushiswapTokenWithSupply": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "description": "Total supply of this pool token.",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "ActivityResponse",
      "schema": {
        "properties": {
          "address": {
            "description": "The requested wallet address.",
            "type": "string"
          },
          "chain_id": {
            "description": "The requested chain ID.",
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "description": "The transactions.",
            "items": {
              "items": {
                "$ref": "#/components/schemas/SushiswapActivityItem"
              }
            },
            "type": "array"
          },
          "next_update_at": {
            "description": "The next updated time.",
            "format": "date-time",
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "quote_currency": {
            "description": "The requested fiat currency.",
            "type": "string"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Pancakeswap address exchange liquidity transactions",
    "websocketSupport": false
  },
  {
    "classSubType": "pancakeswap",
    "classSubTypeDescription": "Trade, earn, and win crypto on the most popular decentralized platform in the galaxy. PancakeSwap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Given `:address`, return Pancakeswap transactions for exchange for address.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 27,
    "params": [
      {
        "choices": [],
        "description": "The requested wallet address.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/56/networks/pancakeswap_v2/assets/:address/transactions/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "ContractMetadata": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ExchangeTransaction": {
          "properties": {
            "act": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "amount_0": {
              "type": "number"
            },
            "amount_0_in": {
              "type": "number"
            },
            "amount_0_out": {
              "type": "number"
            },
            "amount_1": {
              "type": "number"
            },
            "amount_1_in": {
              "type": "number"
            },
            "amount_1_out": {
              "type": "number"
            },
            "block_signed_at": {
              "format": "date-time",
              "type": "string"
            },
            "from_address": {
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "sender_address": {
              "type": "string"
            },
            "to_address": {
              "type": "string"
            },
            "token_0": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "token_1": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "total_quote": {
              "format": "float",
              "type": "number"
            },
            "tx_hash": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "PancakeswapTransactionsExchange": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeTransaction"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "PancakeswapTransactionsExchange",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeTransaction"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Pancakeswap transactions for exchange",
    "websocketSupport": false
  },
  {
    "classSubType": "pancakeswap",
    "classSubTypeDescription": "Trade, earn, and win crypto on the most popular decentralized platform in the galaxy. PancakeSwap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Given `:token_address`, return Pancakeswap transactions for token address.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 28,
    "params": [
      {
        "choices": [],
        "description": "token address",
        "global": false,
        "name": "token_address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/56/networks/pancakeswap_v2/tokens/:token_address/transactions/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "ContractMetadata": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ExchangeTransaction": {
          "properties": {
            "act": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "amount_0": {
              "type": "number"
            },
            "amount_0_in": {
              "type": "number"
            },
            "amount_0_out": {
              "type": "number"
            },
            "amount_1": {
              "type": "number"
            },
            "amount_1_in": {
              "type": "number"
            },
            "amount_1_out": {
              "type": "number"
            },
            "block_signed_at": {
              "format": "date-time",
              "type": "string"
            },
            "from_address": {
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "sender_address": {
              "type": "string"
            },
            "to_address": {
              "type": "string"
            },
            "token_0": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "token_1": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "total_quote": {
              "format": "float",
              "type": "number"
            },
            "tx_hash": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "PancakeswapTokenTransactionsResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeTransaction"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "PancakeswapTokenTransactionsResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeTransaction"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Pancakeswap transactions for token address",
    "websocketSupport": false
  },
  {
    "classSubType": "pancakeswap",
    "classSubTypeDescription": "Trade, earn, and win crypto on the most popular decentralized platform in the galaxy. PancakeSwap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Given `:address`, return Pancakeswap transactions for account address.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 29,
    "params": [
      {
        "choices": [],
        "description": "The requested wallet address.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/56/address/:address/stacks/pancakeswap_v2/acts/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "ContractMetadata": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ExchangeTransaction": {
          "properties": {
            "act": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "amount_0": {
              "type": "number"
            },
            "amount_0_in": {
              "type": "number"
            },
            "amount_0_out": {
              "type": "number"
            },
            "amount_1": {
              "type": "number"
            },
            "amount_1_in": {
              "type": "number"
            },
            "amount_1_out": {
              "type": "number"
            },
            "block_signed_at": {
              "format": "date-time",
              "type": "string"
            },
            "from_address": {
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "sender_address": {
              "type": "string"
            },
            "to_address": {
              "type": "string"
            },
            "token_0": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "token_1": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "total_quote": {
              "format": "float",
              "type": "number"
            },
            "tx_hash": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "PancakeswapAccountTransactionsResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeTransaction"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "PancakeswapAccountTransactionsResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeTransaction"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Pancakeswap transactions for account address",
    "websocketSupport": false
  },
  {
    "classSubType": "pancakeswap",
    "classSubTypeDescription": "Trade, earn, and win crypto on the most popular decentralized platform in the galaxy. PancakeSwap is now accessible on XY=K.",
    "classType": "Class B",
    "description": "Return Pancakeswap last synced block height data and latest block height.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 30,
    "params": [
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/56/networks/pancakeswap_v2/health/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "HealthData": {
          "properties": {
            "latest_block_height": {
              "format": "int32",
              "type": "integer"
            },
            "latest_block_signed_at": {
              "format": "date-time",
              "type": "string"
            },
            "synced_block_height": {
              "format": "int32",
              "type": "integer"
            },
            "synced_block_signed_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "PancakeswapHealthResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/HealthData"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "name": "PancakeswapHealthResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/HealthData"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Pancakeswap health data",
    "websocketSupport": false
  },
  {
    "classSubType": "sushiswap",
    "classSubTypeDescription": "Sushi is the home of DeFi. Our community is building a comprehensive, decentralized trading platform for the future of finance.",
    "classType": "Class B",
    "description": "Given `:chain_id`, return pool information across all Sushiswap pools including LP token prices, reserves, exchange volumes and fees.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 31,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "If `tickers` (a comma separated list) is present, only return the pools that contain these tickers.",
        "global": false,
        "name": "tickers",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The specific page to be returned.",
        "global": false,
        "name": "page-number",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      },
      {
        "choices": [],
        "description": "The number of results per page.",
        "global": false,
        "name": "page-size",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "integer"
      }
    ],
    "path": "/v1/:chain_id/networks/sushiswap/assets/",
    "realTime": false,
    "released_at": "",
    "response": {
      "components": {
        "ExchangeVolume": {
          "properties": {
            "block_height": {
              "format": "int32",
              "type": "integer"
            },
            "exchange": {
              "type": "string"
            },
            "fee_24h_quote": {
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "swap_count_24h": {
              "format": "int64",
              "type": "integer"
            },
            "token_0": {
              "$ref": "#/components/schemas/Token"
            },
            "token_1": {
              "$ref": "#/components/schemas/Token"
            },
            "total_liquidity_quote": {
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "type": "integer"
            },
            "volume_24h_quote": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "SushiswapExchangeListResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeVolume"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Token": {
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "reserve": {
              "type": "integer"
            },
            "volume_in_24h": {
              "type": "number"
            },
            "volume_out_24h": {
              "type": "number"
            }
          },
          "type": "object"
        }
      },
      "name": "SushiswapExchangeListResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeVolume"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Sushiswap pools",
    "websocketSupport": false
  },
  {
    "classSubType": "sushiswap",
    "classSubTypeDescription": "Sushi is the home of DeFi. Our community is building a comprehensive, decentralized trading platform for the future of finance.",
    "classType": "Class B",
    "description": "Given `:chain_id` and wallet `:address`, return a list of Sushiswap address exchange balances.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 32,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested wallet address.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/address/:address/stacks/sushiswap/balances/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "BalanceResponseType": {
          "properties": {
            "address": {
              "type": "string"
            },
            "next_update_at": {
              "format": "date-time",
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "uniswap_v2": {
              "$ref": "#/components/schemas/ContainerU"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ContainerU": {
          "properties": {
            "balances": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapV2BalanceItem"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "UniswapToken": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "UniswapTokenWithSupply": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "description": "Total supply of this pool token.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "UniswapV2BalanceItem": {
          "properties": {
            "pool_token": {
              "$ref": "#/components/schemas/UniswapTokenWithSupply"
            },
            "token_0": {
              "$ref": "#/components/schemas/UniswapToken"
            },
            "token_1": {
              "$ref": "#/components/schemas/UniswapToken"
            }
          },
          "type": "object"
        }
      },
      "name": "BalanceResponseType",
      "schema": {
        "properties": {
          "address": {
            "type": "string"
          },
          "next_update_at": {
            "format": "date-time",
            "type": "string"
          },
          "quote_currency": {
            "type": "string"
          },
          "uniswap_v2": {
            "$ref": "#/components/schemas/ContainerU"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Sushiswap address exchange balances",
    "websocketSupport": false
  },
  {
    "classSubType": "sushiswap",
    "classSubTypeDescription": "Sushi is the home of DeFi. Our community is building a comprehensive, decentralized trading platform for the future of finance.",
    "classType": "Class B",
    "description": "Given `:chain_id` and `:address`, return a list of Sushiswap address exchange liquidity transactions.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 33,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Get additional insight on swap event data related to this address, default: `false`",
        "global": false,
        "name": "swaps",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "boolean"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/address/:address/stacks/sushiswap/acts/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "ActivityResponse": {
          "properties": {
            "address": {
              "description": "The requested wallet address.",
              "type": "string"
            },
            "chain_id": {
              "description": "The requested chain ID.",
              "format": "int64",
              "type": "integer"
            },
            "items": {
              "description": "The transactions.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/SushiswapActivityItem"
                }
              },
              "type": "array"
            },
            "next_update_at": {
              "description": "The next updated time.",
              "format": "date-time",
              "type": "string"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "quote_currency": {
              "description": "The requested fiat currency.",
              "type": "string"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "SushiswapActivityItem": {
          "description": "The transactions.",
          "properties": {
            "act": {
              "type": "string"
            },
            "act_at": {
              "format": "date-time",
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "pool_token": {
              "$ref": "#/components/schemas/SushiswapTokenWithSupply"
            },
            "token_0": {
              "$ref": "#/components/schemas/SushiswapToken"
            },
            "token_1": {
              "$ref": "#/components/schemas/SushiswapToken"
            },
            "tx_hash": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "SushiswapToken": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "SushiswapTokenWithSupply": {
          "properties": {
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "description": "Total supply of this pool token.",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "ActivityResponse",
      "schema": {
        "properties": {
          "address": {
            "description": "The requested wallet address.",
            "type": "string"
          },
          "chain_id": {
            "description": "The requested chain ID.",
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "description": "The transactions.",
            "items": {
              "items": {
                "$ref": "#/components/schemas/SushiswapActivityItem"
              }
            },
            "type": "array"
          },
          "next_update_at": {
            "description": "The next updated time.",
            "format": "date-time",
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "quote_currency": {
            "description": "The requested fiat currency.",
            "type": "string"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [
      {
        "description": "Get Sushiswap exchange liquidity transactions from wallet address on Polygon",
        "params": [
          {
            "name": "chain_id",
            "value": "137"
          },
          {
            "name": "address",
            "value": "0x4121dd930b15742b6d2e89b41284a79320bb8503"
          }
        ]
      }
    ],
    "title": "Get Sushiswap address exchange liquidity transactions",
    "websocketSupport": false
  },
  {
    "classSubType": "aave",
    "classSubTypeDescription": "Aave is an Open Source and Non-Custodial protocol to earn interest on deposits and borrow assets.",
    "classType": "Class B",
    "description": "Given `:chain_id`, return a list of Aave v2 pools.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 34,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Supports `56` for BSC Mainnet and `137` for Polygon/Matic Mainnet, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/networks/aave_v2/assets/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "AaveV2AssetInfo": {
          "description": "The transactions.",
          "properties": {
            "atoken": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "collector_contract": {
              "description": "The reserve factor allocates a share of the protocol's interests to this collector contract.",
              "type": "string"
            },
            "emergency_admin": {
              "description": "The pool emergency administrator contract.",
              "type": "string"
            },
            "lending_pool_addresses_provider": {
              "description": "Addresses register of the protocol for a particular market.",
              "type": "string"
            },
            "lending_pool_addresses_provider_registry": {
              "description": "A register of the active `lending_pool_addresses_provider` contracts, covering all markets.",
              "type": "string"
            },
            "lending_pool_collateral_manager": {
              "description": "Implements actions involving management of collateral in the protocol.",
              "type": "string"
            },
            "lending_pool_configurator": {
              "description": "Provides configuration functions for the LendingPool contracts.",
              "type": "string"
            },
            "lending_pool_contract": {
              "description": "The main contract of the Aave v2 protocol.",
              "type": "string"
            },
            "lending_rate_oracle": {
              "description": "Holds the information needed to calculate and update the interest rates of specific reserves.",
              "type": "string"
            },
            "pool_admin": {
              "description": "The pool administrator contract.",
              "type": "string"
            },
            "price_oracle": {
              "description": "The protocol price provider.",
              "type": "string"
            },
            "protocol_data_provider": {
              "description": "To help integrators and developers more easily leverage the Aave v2 Protocol data and features.",
              "type": "string"
            },
            "stable_borrow_apr": {
              "description": "Stable-borrow annual percentage rate.",
              "format": "float",
              "type": "number"
            },
            "supply_apy": {
              "description": "Supply annual percentage yield.",
              "format": "float",
              "type": "number"
            },
            "underlying": {
              "$ref": "#/components/schemas/ContractMetadataWithPrices"
            },
            "variable_borrow_apr": {
              "description": "Variable-borrow annual percentage rate.",
              "format": "float",
              "type": "number"
            },
            "weth_gateway": {
              "description": "A helper contract to easily wrap and unwrap ETH as necessary.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "AaveV2AssetsResponseItem": {
          "properties": {
            "address": {
              "description": "The requested wallet address.",
              "type": "string"
            },
            "chain_id": {
              "description": "The requested chain ID.",
              "format": "int64",
              "type": "integer"
            },
            "items": {
              "description": "The transactions.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/AaveV2AssetInfo"
                }
              },
              "type": "array"
            },
            "next_update_at": {
              "description": "The next updated time.",
              "format": "date-time",
              "type": "string"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "quote_currency": {
              "description": "The requested fiat currency.",
              "type": "string"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ContractMetadata": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ContractMetadataWithPrices": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "AaveV2AssetsResponseItem",
      "schema": {
        "properties": {
          "address": {
            "description": "The requested wallet address.",
            "type": "string"
          },
          "chain_id": {
            "description": "The requested chain ID.",
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "description": "The transactions.",
            "items": {
              "items": {
                "$ref": "#/components/schemas/AaveV2AssetInfo"
              }
            },
            "type": "array"
          },
          "next_update_at": {
            "description": "The next updated time.",
            "format": "date-time",
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "quote_currency": {
            "description": "The requested fiat currency.",
            "type": "string"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Aave v2 pools",
    "websocketSupport": false
  },
  {
    "classSubType": "aave",
    "classSubTypeDescription": "Aave is an Open Source and Non-Custodial protocol to earn interest on deposits and borrow assets.",
    "classType": "Class B",
    "description": "Given `:chain_id` and `:address`, return a list of Aave v2 address balances, supply and borrow positions.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 35,
    "params": [
      {
        "choices": [],
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "global": true,
        "name": "chain_id",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/:chain_id/address/:address/stacks/aave_v2/balances/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "AaveBalanceItemV2": {
          "description": "`Aave v2` balance.",
          "properties": {
            "asset_contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "asset_contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "asset_contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "atoken_balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "atoken_contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "atoken_contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "atoken_contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "atoken_contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "borrow_balance": {
              "description": "The current borrow balance.",
              "type": "integer"
            },
            "borrow_quote": {
              "description": "The current borrow balance in `quote_currency`.",
              "format": "float",
              "type": "number"
            },
            "borrow_rate": {
              "description": "The current borrow rate.",
              "format": "float",
              "type": "number"
            },
            "liquidity_rate": {
              "description": "The current supply rate.",
              "format": "float",
              "type": "number"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "origination_fee": {
              "description": "The percentage of the loan amount collected on loan origination.",
              "type": "integer"
            },
            "quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "AaveV2BalanceItemWithPositions": {
          "description": "The transactions.",
          "properties": {
            "balance": {
              "$ref": "#/components/schemas/AaveBalanceItemV2"
            },
            "borrow_position": {
              "$ref": "#/components/schemas/AaveV2BorrowPosition"
            },
            "supply_position": {
              "$ref": "#/components/schemas/AaveV2SupplyPosition"
            }
          },
          "type": "object"
        },
        "AaveV2BalanceResponseItem": {
          "properties": {
            "address": {
              "description": "The requested wallet address.",
              "type": "string"
            },
            "chain_id": {
              "description": "The requested chain ID.",
              "format": "int64",
              "type": "integer"
            },
            "items": {
              "description": "The transactions.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/AaveV2BalanceItemWithPositions"
                }
              },
              "type": "array"
            },
            "next_update_at": {
              "description": "The next updated time.",
              "format": "date-time",
              "type": "string"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "quote_currency": {
              "description": "The requested fiat currency.",
              "type": "string"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "AaveV2BorrowPosition": {
          "description": "`Aave v2` borrow position.",
          "properties": {
            "apr": {
              "description": "Borrow annual percentage rate.",
              "format": "float",
              "type": "number"
            },
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "balance_quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "borrowed": {
              "description": "Borrow statement.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "AaveV2SupplyPosition": {
          "description": "`Aave v2` supply position.",
          "properties": {
            "apy": {
              "description": "Supply annual percentage yield.",
              "format": "float",
              "type": "number"
            },
            "balance": {
              "description": "Current balance.",
              "type": "integer"
            },
            "balance_quote": {
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "supplied": {
              "description": "Supply statement.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "AaveV2BalanceResponseItem",
      "schema": {
        "properties": {
          "address": {
            "description": "The requested wallet address.",
            "type": "string"
          },
          "chain_id": {
            "description": "The requested chain ID.",
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "description": "The transactions.",
            "items": {
              "items": {
                "$ref": "#/components/schemas/AaveV2BalanceItemWithPositions"
              }
            },
            "type": "array"
          },
          "next_update_at": {
            "description": "The next updated time.",
            "format": "date-time",
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "quote_currency": {
            "description": "The requested fiat currency.",
            "type": "string"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Aave v2 address balances",
    "websocketSupport": false
  },
  {
    "classSubType": "aave",
    "classSubTypeDescription": "Aave is an Open Source and Non-Custodial protocol to earn interest on deposits and borrow assets.",
    "classType": "Class B",
    "description": "Return a list of Aave pools.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 36,
    "params": [
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/1/networks/aave/assets/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "AaveAssetInfo": {
          "properties": {
            "atoken": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "lending_pool_contract": {
              "description": "The main contract of the Aave v1 protocol.",
              "type": "string"
            },
            "lending_pool_core_contract": {
              "description": "The main core contract of the Aave v1 protocol.",
              "type": "string"
            },
            "stable_borrow_apr": {
              "description": "Stable-borrow annual percentage rate.",
              "format": "float",
              "type": "number"
            },
            "supply_apy": {
              "description": "Supply annual percentage yield.",
              "format": "float",
              "type": "number"
            },
            "underlying": {
              "$ref": "#/components/schemas/ContractMetadataWithPrices"
            },
            "variable_borrow_apr": {
              "description": "Variable-borrow annual percentage rate.",
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "AaveAssetsResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/AaveAssetInfo"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ContractMetadata": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ContractMetadataWithPrices": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "AaveAssetsResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/AaveAssetInfo"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Aave pools",
    "websocketSupport": false
  },
  {
    "classSubType": "aave",
    "classSubTypeDescription": "Aave is an Open Source and Non-Custodial protocol to earn interest on deposits and borrow assets.",
    "classType": "Class B",
    "description": "Given `:address`, return a list of Aave address balances, supply and borrow positions.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 37,
    "params": [
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/1/address/:address/stacks/aave/balances/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "AaveBalanceItem": {
          "properties": {
            "atoken_balance": {
              "type": "integer"
            },
            "atoken_contract_address": {
              "type": "string"
            },
            "atoken_contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "atoken_contract_name": {
              "type": "string"
            },
            "atoken_contract_ticker_symbol": {
              "type": "string"
            },
            "borrow_balance": {
              "type": "integer"
            },
            "borrow_quote": {
              "format": "float",
              "type": "number"
            },
            "borrow_rate": {
              "format": "double",
              "type": "number"
            },
            "liquidity_rate": {
              "format": "double",
              "type": "number"
            },
            "logo_url": {
              "type": "string"
            },
            "origination_fee": {
              "type": "integer"
            },
            "peg_contract_address": {
              "type": "string"
            },
            "peg_contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "peg_contract_ticker_symbol": {
              "type": "string"
            },
            "quote": {
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "AaveBalanceResponseType": {
          "properties": {
            "aave": {
              "$ref": "#/components/schemas/ContainerA"
            },
            "address": {
              "type": "string"
            },
            "next_update_at": {
              "format": "date-time",
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ContainerA": {
          "properties": {
            "balances": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/AaveBalanceItem"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "name": "AaveBalanceResponseType",
      "schema": {
        "properties": {
          "aave": {
            "$ref": "#/components/schemas/ContainerA"
          },
          "address": {
            "type": "string"
          },
          "next_update_at": {
            "format": "date-time",
            "type": "string"
          },
          "quote_currency": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Aave address balances",
    "websocketSupport": false
  },
  {
    "classSubType": "compound",
    "classSubTypeDescription": "Compound is an algorithmic, autonomous interest rate protocol built for developers, to unlock a universe of open financial applications.",
    "classType": "Class B",
    "description": "Return a list of Compound pools.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 38,
    "params": [
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/1/networks/compound/assets/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "CompoundAssetInfo": {
          "properties": {
            "borrow_apr": {
              "format": "float",
              "type": "number"
            },
            "ctoken": {
              "$ref": "#/components/schemas/ContractMetadataWithPrices"
            },
            "supply_apr": {
              "format": "float",
              "type": "number"
            },
            "underlying": {
              "$ref": "#/components/schemas/ContractMetadataWithPrices"
            }
          },
          "type": "object"
        },
        "CompoundAssetResponse": {
          "properties": {
            "items": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/CompoundAssetInfo"
                }
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ContractMetadataWithPrices": {
          "properties": {
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote_rate": {
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float",
              "type": "number"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "CompoundAssetResponse",
      "schema": {
        "properties": {
          "items": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/CompoundAssetInfo"
              }
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Compound pools",
    "websocketSupport": false
  },
  {
    "classSubType": "compound",
    "classSubTypeDescription": "Compound is an algorithmic, autonomous interest rate protocol built for developers, to unlock a universe of open financial applications.",
    "classType": "Class B",
    "description": "Given `:address`, return a list of Compound address balances.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 39,
    "params": [
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/1/address/:address/stacks/compound/balances/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "CompoundBalanceItem": {
          "properties": {
            "account_address": {
              "type": "string"
            },
            "borrow_tokens": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/CompoundToken"
                }
              },
              "type": "array"
            },
            "comp_accrued": {
              "type": "integer"
            },
            "comp_accrued_quote": {
              "format": "float",
              "type": "number"
            },
            "comp_balance": {
              "type": "integer"
            },
            "comp_balance_quote": {
              "format": "float",
              "type": "number"
            },
            "source": {
              "type": "string"
            },
            "supply_tokens": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/CompoundToken"
                }
              },
              "type": "array"
            },
            "total_borrow_eth": {
              "type": "integer"
            },
            "total_borrow_eth_quote": {
              "format": "float",
              "type": "number"
            },
            "total_borrowing_power_eth": {
              "type": "integer"
            },
            "total_borrowing_power_eth_quote": {
              "format": "float",
              "type": "number"
            },
            "total_collateral_eth": {
              "type": "integer"
            },
            "total_collateral_eth_quote": {
              "format": "float",
              "type": "number"
            },
            "total_supply_eth": {
              "type": "integer"
            },
            "total_supply_eth_quote": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "CompoundBalanceResponseType": {
          "properties": {
            "address": {
              "type": "string"
            },
            "compound": {
              "$ref": "#/components/schemas/ContainerCo"
            },
            "next_update_at": {
              "format": "date-time",
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "CompoundToken": {
          "properties": {
            "apr": {
              "format": "float",
              "type": "number"
            },
            "balance": {
              "type": "integer"
            },
            "balance_quote": {
              "format": "float",
              "type": "number"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "interest_accrued": {
              "type": "integer"
            },
            "interest_accrued_quote": {
              "format": "float",
              "type": "number"
            },
            "logo_url": {
              "type": "string"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ContainerCo": {
          "properties": {
            "balances": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/CompoundBalanceItem"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "name": "CompoundBalanceResponseType",
      "schema": {
        "properties": {
          "address": {
            "type": "string"
          },
          "compound": {
            "$ref": "#/components/schemas/ContainerCo"
          },
          "next_update_at": {
            "format": "date-time",
            "type": "string"
          },
          "quote_currency": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Compound address balances",
    "websocketSupport": false
  },
  {
    "classSubType": "compound",
    "classSubTypeDescription": "Compound is an algorithmic, autonomous interest rate protocol built for developers, to unlock a universe of open financial applications.",
    "classType": "Class B",
    "description": "Given `:address`, return a list of Compound address activity.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 40,
    "params": [
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/1/address/:address/stacks/compound/acts/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "CompoundActivity": {
          "description": "The transactions.",
          "properties": {
            "act": {
              "type": "string"
            },
            "act_at": {
              "format": "date-time",
              "type": "string"
            },
            "amount": {
              "type": "number"
            },
            "contract_address": {
              "type": "string"
            },
            "contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "contract_logo_url": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "ctoken_amount": {
              "type": "number"
            },
            "ctoken_contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "ctoken_contract_ticker_symbol": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "gas_offered": {
              "format": "int64",
              "type": "integer"
            },
            "gas_price": {
              "format": "int64",
              "type": "integer"
            },
            "gas_quote": {
              "format": "float",
              "type": "number"
            },
            "gas_spent": {
              "format": "int64",
              "type": "integer"
            },
            "quote": {
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "successful": {
              "type": "boolean"
            },
            "tx_hash": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "CompoundActivityResponse": {
          "properties": {
            "address": {
              "description": "The requested wallet address.",
              "type": "string"
            },
            "chain_id": {
              "description": "The requested chain ID.",
              "format": "int64",
              "type": "integer"
            },
            "items": {
              "description": "The transactions.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/CompoundActivity"
                }
              },
              "type": "array"
            },
            "next_update_at": {
              "description": "The next updated time.",
              "format": "date-time",
              "type": "string"
            },
            "pagination": {
              "$ref": "#/components/schemas/Pagination"
            },
            "quote_currency": {
              "description": "The requested fiat currency.",
              "type": "string"
            },
            "updated_at": {
              "description": "The updated time.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Pagination": {
          "properties": {
            "has_more": {
              "description": "`true` if we can  paginate to get more data.",
              "type": "boolean"
            },
            "page_number": {
              "description": "The specific page being returned.",
              "format": "int32",
              "type": "integer"
            },
            "page_size": {
              "description": "The number of results per page.",
              "format": "int32",
              "type": "integer"
            },
            "total_count": {
              "description": "Total number of entries.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "name": "CompoundActivityResponse",
      "schema": {
        "properties": {
          "address": {
            "description": "The requested wallet address.",
            "type": "string"
          },
          "chain_id": {
            "description": "The requested chain ID.",
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "description": "The transactions.",
            "items": {
              "items": {
                "$ref": "#/components/schemas/CompoundActivity"
              }
            },
            "type": "array"
          },
          "next_update_at": {
            "description": "The next updated time.",
            "format": "date-time",
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "quote_currency": {
            "description": "The requested fiat currency.",
            "type": "string"
          },
          "updated_at": {
            "description": "The updated time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Compound address activity",
    "websocketSupport": false
  },
  {
    "classSubType": "curve",
    "classSubTypeDescription": "Curve is an exchange liquidity pool on Ethereum designed for: extremely efficient stablecoin trading, low risk, supplemental fee income for liquidity providers.",
    "classType": "Class B",
    "description": "Given `:address`, return a list of Curve address balances.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 41,
    "params": [
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/1/address/:address/stacks/curve/balances/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "ContainerC": {
          "properties": {
            "curve": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/cBalance"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ContractMetadataWithBalance": {
          "properties": {
            "balance": {
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "quote": {
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ContractMetadataWithBalanceSupply": {
          "properties": {
            "balance": {
              "type": "integer"
            },
            "contract_address": {
              "description": "Smart contract address.",
              "type": "string"
            },
            "contract_decimals": {
              "description": "Smart contract decimals.",
              "format": "int32",
              "type": "integer"
            },
            "contract_name": {
              "description": "Smart contract name.",
              "type": "string"
            },
            "contract_ticker_symbol": {
              "description": "Smart contract ticker symbol.",
              "type": "string"
            },
            "fee": {
              "type": "integer"
            },
            "logo_url": {
              "description": "Smart contract URL.",
              "type": "string"
            },
            "supply": {
              "type": "integer"
            },
            "supports_erc": {
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
                  "type": "string"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "CurveBalanceResponseType": {
          "properties": {
            "address": {
              "type": "string"
            },
            "balancer": {
              "$ref": "#/components/schemas/ContainerC"
            },
            "next_update_at": {
              "format": "date-time",
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "cBalance": {
          "properties": {
            "pool": {
              "$ref": "#/components/schemas/ContractMetadataWithBalanceSupply"
            },
            "underlying": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ContractMetadataWithBalance"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "name": "CurveBalanceResponseType",
      "schema": {
        "properties": {
          "address": {
            "type": "string"
          },
          "balancer": {
            "$ref": "#/components/schemas/ContainerC"
          },
          "next_update_at": {
            "format": "date-time",
            "type": "string"
          },
          "quote_currency": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Curve address balances",
    "websocketSupport": false
  },
  {
    "classSubType": "balancer",
    "classSubTypeDescription": "Balancer is an automated portfolio manager and trading platform.",
    "classType": "Class B",
    "description": "Given `:address`, return a list of Balancer exchange address balances.",
    "id": "1",
    "isBeta": false,
    "notes": [],
    "order": 42,
    "params": [
      {
        "choices": [],
        "description": "Passing in an `ENS` resolves automatically.",
        "global": false,
        "name": "address",
        "pathParam": true,
        "primer": false,
        "required": true,
        "type": "string"
      },
      {
        "choices": [],
        "description": "The requested fiat currency.",
        "global": true,
        "name": "quote-currency",
        "pathParam": false,
        "primer": false,
        "required": false,
        "type": "string"
      }
    ],
    "path": "/v1/1/address/:address/stacks/balancer/balances/",
    "realTime": true,
    "released_at": "",
    "response": {
      "components": {
        "BalancerBalanceItem": {
          "properties": {
            "assets": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/BalancerTokenWithWeight"
                }
              },
              "type": "array"
            },
            "pool": {
              "$ref": "#/components/schemas/BalancerTokenWithSupplyAndFee"
            }
          },
          "type": "object"
        },
        "BalancerBalanceResponseType": {
          "properties": {
            "address": {
              "type": "string"
            },
            "balancer": {
              "$ref": "#/components/schemas/ContainerB"
            },
            "next_update_at": {
              "format": "date-time",
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "BalancerTokenWithSupplyAndFee": {
          "properties": {
            "balance": {
              "type": "integer"
            },
            "contract_address": {
              "type": "string"
            },
            "contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            },
            "quote": {
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "swap_fee": {
              "format": "float",
              "type": "number"
            },
            "total_supply": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "BalancerTokenWithWeight": {
          "properties": {
            "balance": {
              "type": "integer"
            },
            "contract_address": {
              "type": "string"
            },
            "contract_decimals": {
              "format": "int32",
              "type": "integer"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            },
            "quote": {
              "format": "float",
              "type": "number"
            },
            "quote_rate": {
              "format": "float",
              "type": "number"
            },
            "weight": {
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "ContainerB": {
          "properties": {
            "balances": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/BalancerBalanceItem"
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "name": "BalancerBalanceResponseType",
      "schema": {
        "properties": {
          "address": {
            "type": "string"
          },
          "balancer": {
            "$ref": "#/components/schemas/ContainerB"
          },
          "next_update_at": {
            "format": "date-time",
            "type": "string"
          },
          "quote_currency": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "status": 200
    },
    "supportedProtocols": [],
    "templates": [],
    "title": "Get Balancer exchange address balances",
    "websocketSupport": false
  }
]
